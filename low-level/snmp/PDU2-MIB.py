# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

# PySNMP SMI module. Autogenerated from smidump -f python PDU2-MIB
# by libsmi2pysnmp-0.1.3 at Wed Mar  9 14:05:53 2016,
# Python version sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( sysContact, sysLocation, sysName, ) = mibBuilder.importSymbols("RFC1213-MIB", "sysContact", "sysLocation", "sysName")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, MacAddress, RowPointer, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowPointer", "TextualConvention", "TruthValue")

# Types

class BoardTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,1,2,3,)
    namedValues = NamedValues(("mainController", 1), ("inletController", 2), ("outletController", 3), ("meteringController", 4), )
    
class DaisychainMemberTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,0,1,)
    namedValues = NamedValues(("standalone", 0), ("master", 1), ("slave", 2), )
    
class DeviceCascadeTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("bridging", 0), ("portForwarding", 1), )
    
class DeviceIdentificationParameterEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,0,3,1,)
    namedValues = NamedValues(("pduName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3), )
    
class ExternalSensorsZCoordinateUnitsEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("rackUnits", 0), ("text", 1), )
    
class GlobalOutletStateOnStartupEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,2,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), )
    
class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,10000)
    
class OutletStateOnStartupEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,2,3,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), ("globalOutletStateOnStartup", 3), )
    
class OutletSwitchingOperationsEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,2,)
    namedValues = NamedValues(("off", 0), ("on", 1), ("cycle", 2), )
    
class OverCurrentProtectorTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,6,1,7,8,5,2,4,)
    namedValues = NamedValues(("ocpBREAKER1POLE", 1), ("ocpBREAKER2POLE", 2), ("ocpBREAKER3POLE", 3), ("ocpFUSE", 4), ("ocpFUSEPAIR", 5), ("ocpRCBO2POLE", 6), ("ocpRCBO3POLE", 7), ("ocpRCBO4POLE", 8), )
    
class PeripheralDeviceFirmwareUpdateStateEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,)
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3), )
    
class PlugTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,41,40,9,34,39,43,31,1,24,8,6,7,18,-1,26,14,37,47,0,27,15,13,35,11,30,42,2,10,45,33,48,17,16,49,5,28,46,44,38,23,32,3,12,36,29,25,)
    namedValues = NamedValues(("plugOTHER", -1), ("plugNONE", 0), ("plug56P320", 1), ("plugIEC603093WIRE250V32A", 10), ("plugIEC603093WIRE250V60A", 11), ("plugIEC603093WIRE250V63A", 12), ("plugIEC603093WIRE250V100A", 13), ("plugIEC603093WIRE250V125A", 14), ("plugIEC603094WIRE250V20A", 15), ("plugIEC603094WIRE250V30A", 16), ("plugIEC603094WIRE250V60A", 17), ("plugIEC603094WIRE250V100A", 18), ("plug56P520", 2), ("plugIEC603095WIRE208V20A", 23), ("plugIEC603095WIRE208V30A", 24), ("plugIEC603095WIRE208V60A", 25), ("plugIEC603095WIRE208V100A", 26), ("plugIEC603095WIRE415V16A", 27), ("plugIEC603095WIRE415V32A", 28), ("plugIEC603095WIRE415V63A", 29), ("plug56P532", 3), ("plugIEC603095WIRE415V125A", 30), ("plugIEC603095WIRE480V20A", 31), ("plugIEC603095WIRE480V30A", 32), ("plugIEC603095WIRE480V60A", 33), ("plugIEC603095WIRE480V100A", 34), ("plugNEMA515P", 35), ("plugNEMAL515P", 36), ("plugNEMA520P", 37), ("plugNEMAL520P", 38), ("plugNEMAL530P", 39), ("plugCS8365C", 4), ("plugNEMAL615P", 40), ("plugNEMAL620P", 41), ("plugNEMAL630P", 42), ("plugNEMAL1520P", 43), ("plugNEMAL1530P", 44), ("plugNEMAL2120P", 45), ("plugNEMAL2130P", 46), ("plugNEMAL2230P", 47), ("plug56P320F", 48), ("plug56PA320", 49), ("plugIEC320C14", 5), ("plugIEC320C20", 6), ("plugIEC603093WIRE250V16A", 7), ("plugIEC603093WIRE250V20A", 8), ("plugIEC603093WIRE250V30A", 9), )
    
class ProductTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,2,)
    namedValues = NamedValues(("rackPdu", 0), ("bcm", 1), ("transferSwitch", 2), )
    
class ReceptacleTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(17,47,48,26,18,4,15,3,25,36,24,13,29,10,38,8,33,34,31,43,23,-1,30,1,7,37,11,5,14,16,35,40,32,12,45,9,41,46,39,0,28,27,44,42,6,)
    namedValues = NamedValues(("receptacleOTHER", -1), ("receptacleNONE", 0), ("receptacleBS1363", 1), ("receptacleIEC603093WIRE250V32A", 10), ("receptacleIEC603093WIRE250V60A", 11), ("receptacleIEC603093WIRE250V63A", 12), ("receptacleIEC603093WIRE250V100A", 13), ("receptacleIEC603093WIRE250V125A", 14), ("receptacleIEC603094WIRE250V20A", 15), ("receptacleIEC603094WIRE250V30A", 16), ("receptacleIEC603094WIRE250V60A", 17), ("receptacleIEC603094WIRE250V100A", 18), ("receptacleIEC603095WIRE208V20A", 23), ("receptacleIEC603095WIRE208V30A", 24), ("receptacleIEC603095WIRE208V60A", 25), ("receptacleIEC603095WIRE208V100A", 26), ("receptacleIEC603095WIRE415V16A", 27), ("receptacleIEC603095WIRE415V32A", 28), ("receptacleIEC603095WIRE415V63A", 29), ("receptacle56P532", 3), ("receptacleIEC603095WIRE415V125A", 30), ("receptacleIEC603095WIRE480V20A", 31), ("receptacleIEC603095WIRE480V30A", 32), ("receptacleIEC603095WIRE480V60A", 33), ("receptacleIEC603095WIRE480V100A", 34), ("receptacleNEMA515R", 35), ("receptacleNEMAL515R", 36), ("receptacleNEMA520R", 37), ("receptacleNEMAL520R", 38), ("receptacleNEMAL530R", 39), ("receptacleCS8364C", 4), ("receptacleNEMAL615R", 40), ("receptacleNEMAL620R", 41), ("receptacleNEMAL630R", 42), ("receptacleNEMAL1520R", 43), ("receptacleNEMAL1530R", 44), ("receptacleNEMAL2120RP", 45), ("receptacleNEMAL2130R", 46), ("receptacleSCHUKOTYPEE", 47), ("receptacleSCHUKOTYPEF", 48), ("receptacleIEC320C13", 5), ("receptacleIEC320C19", 6), ("receptacleIEC603093WIRE250V16A", 7), ("receptacleIEC603093WIRE250V20A", 8), ("receptacleIEC603093WIRE250V30A", 9), )
    
class RelayPowerLossBehaviorEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("nonLatching", 0), ("latching", 1), )
    
class SensorStateEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(10,5,24,22,18,27,6,29,21,14,12,15,11,0,7,3,8,-1,16,17,26,4,19,20,2,9,25,28,1,23,)
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("notDetected", 10), ("alarmed", 11), ("ok", 12), ("fail", 14), ("yes", 15), ("no", 16), ("standby", 17), ("one", 18), ("two", 19), ("belowLowerCritical", 2), ("inSync", 20), ("outOfSync", 21), ("i1OpenFault", 22), ("i1ShortFault", 23), ("i2OpenFault", 24), ("i2ShortFault", 25), ("fault", 26), ("warning", 27), ("critical", 28), ("selfTest", 29), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), )
    
class SensorTypeEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(47,46,21,26,24,10,16,42,25,37,4,45,12,31,41,22,11,3,48,1,38,44,33,23,17,2,7,43,19,32,6,13,8,15,30,9,39,34,5,14,27,40,20,18,)
    namedValues = NamedValues(("rmsCurrent", 1), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("peakCurrent", 2), ("contact", 20), ("fanSpeed", 21), ("surgeProtectorStatus", 22), ("frequency", 23), ("phaseAngle", 24), ("rmsVoltageLN", 25), ("residualCurrent", 26), ("rcmState", 27), ("unbalancedCurrent", 3), ("other", 30), ("none", 31), ("powerQuality", 32), ("overloadStatus", 33), ("overheatStatus", 34), ("fanStatus", 37), ("inletPhaseSyncAngle", 38), ("inletPhaseSync", 39), ("rmsVoltage", 4), ("operatingState", 40), ("activeInlet", 41), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45), ("i1smpsStatus", 46), ("i2smpsStatus", 47), ("switchStatus", 48), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), )
    
class SensorUnitsEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(14,7,17,15,1,11,18,19,21,9,8,0,20,5,12,16,10,3,2,-1,13,4,6,)
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("amp", 2), ("degrees", 20), ("lux", 21), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), )
    
class TransferSwitchTransferReasonEnumeration(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,6,7,5,0,8,3,)
    namedValues = NamedValues(("unknown", 0), ("startup", 1), ("manualTransfer", 2), ("automaticReTransfer", 3), ("powerFailure", 4), ("powerQuality", 5), ("overloadAlarm", 6), ("overheatAlarm", 7), ("internalFailure", 8), )
    
class URL(TextualConvention, OctetString):
    displayHint = "255a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,255)
    

# Objects

raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742)).setRevisions(("2014-06-04 00:00","2014-01-09 00:00","2014-01-07 00:00","2013-11-21 00:00","2013-09-18 00:00","2013-08-01 00:00","2013-07-10 00:00","2013-07-02 00:00","2013-05-21 00:00","2013-04-26 00:00","2013-03-27 00:00","2013-03-25 10:00","2013-03-25 00:00","2013-03-18 00:00","2013-02-25 00:00","2013-02-04 00:00","2013-01-24 00:00","2012-11-20 00:00","2012-11-15 00:00","2012-10-05 00:00","2012-10-04 00:00","2012-09-28 00:00","2012-09-21 00:00","2012-09-20 00:00","2012-09-17 00:00","2012-09-04 00:00","2012-06-22 00:00","2012-06-18 00:00","2012-06-06 00:00","2012-05-25 00:00","2012-05-15 00:00","2012-03-26 00:00","2011-12-13 00:00","2011-11-29 00:00","2011-10-25 00:00","2011-06-16 00:00","2011-03-22 00:00","2011-02-21 00:00","2011-02-14 00:00","2011-02-08 00:00","2011-02-03 00:00","2011-01-31 00:00","2010-12-15 00:00","2010-12-13 11:31","2010-12-13 00:00","2010-12-07 00:00","2010-10-07 00:00","2010-10-04 00:00","2010-09-01 00:00","2010-08-05 00:00","2010-07-23 00:00","2010-07-22 00:00","2010-07-21 00:00","2010-07-14 00:00","2010-07-06 00:00","2010-07-01 00:00","2010-06-30 00:00","2010-06-21 00:00","2010-06-03 00:00","2010-05-27 00:00","2010-05-24 00:00","2010-04-19 00:00","2010-04-15 00:00","2010-04-08 00:00","2010-03-29 00:00","2010-03-25 00:00","2010-03-16 00:00","2010-03-01 00:00","2010-01-29 00:00",))
if mibBuilder.loadTexts: raritan.setOrganization("Raritan")
if mibBuilder.loadTexts: raritan.setContactInfo("\nAuthor:       Raritan Americas, Inc.\npostal:       Raritan Americas, Inc.\n              400 Cottontail Lane\n              Somerset, NJ 08873\nemail:        tech@raritan.com\nphone:        +1 732 764 8886")
if mibBuilder.loadTexts: raritan.setDescription("This MIB describes the SNMP functions of the Dominion PX G2\nPower Distribution Unit by Raritan Computer.")
pdu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0))
trapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1))
if mibBuilder.loadTexts: trapInformationTable.setDescription("A list of Trap Information entries. The number of\nentries is given by the value of pduCount.")
trapInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: trapInformationEntry.setDescription("An entry containing objects used in traps.")
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setDescription("The user currently logged in.")
targetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setDescription("The user added, deleted, or modified.")
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setDescription("The version of the upgrade image.")
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setDescription("The role added, deleted, or modified.")
smtpMessageRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setDescription("Comma separated list of SMTP Message recipients")
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setDescription("The IP address/host name of the SMTP server")
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 2), SensorStateEnumeration()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: oldSensorState.setDescription("The old sensor state used in Sensor State Transition traps.")
pduNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: pduNumber.setDescription("A unique value for each PDU. Its value\nranges between 1 and the value of pduCount.")
inletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: inletPoleNumber.setDescription("A unique value for each inlet Pole. Its value\nranges between 1 and the value of inletPoleCount.")
outletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: outletPoleNumber.setDescription("A unique value for each outlet Pole. Its value\nranges between 1 and the value of outletPoleCount.")
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: externalSensorNumber.setDescription("A unique value for each external sensor. Its value\nranges between 1 and the value of externalSensorCount.")
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 10), SensorTypeEnumeration()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: typeOfSensor.setDescription("The type of sensor.")
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 11), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: errorDescription.setDescription("Description of the Error")
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 12), DeviceIdentificationParameterEnumeration()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: deviceChangedParameter.setDescription("Description of the parameter(s) that changed.")
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 13), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: changedParameterNewValue.setDescription("The new value of the changed parameter ")
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 14), TruthValue()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: lhxSupportEnabled.setDescription("The new enabled state for Schroff LHX Support.")
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 15), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: webcamModel.setDescription("The model of the Webcam ")
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 16), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: webcamConnectionPort.setDescription("The port to which the Webcam is connected ")
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 18), InetPortNumber()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: agentInetPortNumber.setDescription("The UDP port number used for accessing \nthe SNMP agent on the device.\nExamples: \n     If deviceCascadeType is portForwarding, then\n          master: 50500\n          slave 1:50501\n          slave 2: 50502\n          ...... \n     If cascading mode is not portForwarding and default (Standard) ports are being used, then\n          port: 161\n          ")
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 19), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setDescription("The Romcode of an peripheral device")
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 20), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setDescription("The firmware update state of an peripheral device")
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3))
pduCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCount.setDescription("The number of PDUs")
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2))
nameplateTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1))
if mibBuilder.loadTexts: nameplateTable.setDescription("A list of PDU nameplate entries. The number of\nentries is given by the value of pduCount.")
nameplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: nameplateEntry.setDescription("An entry providing PDU nameplate information.")
pduId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pduId.setDescription("A unique value for each PDU. Its value\nranges between 1 and the value of pduCount.")
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setDescription("The PDU manaufacturer.")
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setDescription("The PDU model.")
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setDescription("The PDU serial Number.")
pduRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVoltage.setDescription("The PDU voltage rating.")
pduRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedCurrent.setDescription("The PDU current rating.")
pduRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedFrequency.setDescription("The PDU frequency rating.")
pduRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVA.setDescription("The PDU VA (VoltAmps) rating.")
pduImage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 9), URL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduImage.setDescription("The URL of the wiring diagram for this PDU.")
unitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2))
if mibBuilder.loadTexts: unitConfigurationTable.setDescription("A list of PDU configuration entries. The number of\nentries is given by the value of pduCount.")
unitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1)).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: unitConfigurationEntry.setDescription("An entry containing configuration objects for a particular PDU.")
inletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setDescription("The number of inlets.")
overCurrentProtectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCount.setDescription("The number of overcurrent protectors.")
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setDescription("The number of outlets.")
inletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletControllerCount.setDescription("The number of inlet controllers.")
outletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControllerCount.setDescription("The number of outlet controllers.")
externalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setDescription("The number of external sensors.")
pxIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxIPAddress.setDescription("The current IP address. A value of xx.xx.xx.xx indicates an error\nor an unset option.")
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setDescription("The current netmask. A value of xx.xx.xx.xx indicates an error\nor an unset option.")
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setDescription("The current gateway. A value of xx.xx.xx.xx indicates an error\nor an unset option.")
pxMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxMACAddress.setDescription("The current MAC address.")
utcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setDescription("The current UTC offset.")
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setDescription("The user-defined name for the PDU.")
externalSensorsZCoordinateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 34), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setDescription("External Sensor Z Coordinate units: Freeform Text or Rack Units (U)\nDefault is U.")
unitDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 35), Bits().subtype(namedValues=NamedValues(("i1smpsStatus", 45), ("i2smpsStatus", 46), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitDeviceCapabilities.setDescription("A bit string  which indicates which unit sensors are available.")
outletSequencingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequencingDelay.setDescription("It is deprecated. This is an alias for  inrushGuardDelay")
globalOutletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletPowerCyclingPowerOffPeriod.setDescription("The power-off period when an outlet is cycled;\napplies to all outlets unless overridden at the outlet level;\nspecified in seconds; \n0 <= value <= 3600 seconds.")
globalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 38), GlobalOutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletStateOnStartup.setDescription("The outlet state on device startup; applies to all outlets\nunless overridden at the outlet level.\n Note that this value is ignored if relayBehaviorOnPowerLoss is set to latching.")
outletPowerupSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerupSequence.setDescription("The sequence in which will the outlets will be switched on under the following conditions.\n1) Switch all outlets on operation is executed\n2) Power to the PDU is cycled\nString must consist of a comma separated sequence of the outlet numbers and\nall outlet numbers must be included. The numbers entered must be a permutation of the numbers\n1,2,3,-outletnumber.\nExample for a 12 outlet PDU: 1,12,3,5,6,7,10,2,4,11,9,8.\n\nThe per outlet sequence delays are defined as outletSequenceDelay in the outletConfigurationTable")
pduPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPowerCyclingPowerOffPeriod.setDescription("When power to the  PX is cycled (either manually or because of a\ntemporary power loss), this number determines how many seconds the\nPX will wait before it provides power to the outlets.\nspecified in seconds:\n0 <= value <= 3600 seconds.\n Note that this value is ignored if relayBehaviorOnPowerLoss is set to latching.")
pduDaisychainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 41), DaisychainMemberTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDaisychainMemberType.setDescription("The daisy chain member type.")
managedExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setDescription("The number of managed external sensors ")
pxInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 50), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetAddressType.setDescription("The type of address format\nThis object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).")
pxInetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 51), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetIPAddress.setDescription("The current IP address. A value of xx.xx.xx.xx indicates an error\nor an unset option.\nThis object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\nFor IPv6, its value is xx.xx.xx.xx ")
pxInetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetNetmask.setDescription("The current netmask. A value of xx.xx.xx.xx indicates an error\nor an unset option.\nThis object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\nFor IPv6, its value is xx.xx.xx.xx ")
pxInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 53), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetGateway.setDescription("The current gateway. A value of xx.xx.xx.xx indicates an error\nor an unset option.\nThis object is deprecated in favor of ipAddressTable from the IP-MIB (rfc4293).\nFor IPv6, its value is xx.xx.xx.xx ")
loadShedding = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadShedding.setDescription("Enter/Exit Load Shedding Mode")
serverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setDescription("The number of servers")
inrushGuardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inrushGuardDelay.setDescription("The time interval between switching on two outlets; \nspecified in milliseconds; \n100 <= value <= 100000 milliseconds.")
cascadedDeviceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setDescription("Indicates whether another PX2 is connected using an USB cable to \nthe USB-A port of this PX2 in a cascaded configuration.\n    true: Connected\n    false: Not Connected")
synchronizeWithNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setDescription("Will time be obtained using NTP?\ntrue:  time will be obtained using NTP servers\nfalse: time will not be obtained using NTP servers\nDeafault is false.")
useDHCPProvidedNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setDescription("Will the NTP server addresses be provided by DHCP/BOOTP?\nThis is used only if synchronizeWithNTPServer is enabled \nDefault is enabled, i.e. DHCP provided NTP servers will be used ")
firstNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 61), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setDescription("Represents the type of the corresponding instance\nof firstNTPServerAddress object.")
firstNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 62), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setDescription("The address of the primary ntp server.")
secondNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 63), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setDescription("Represents the type of the corresponding instance\nof secondNTPServerAddress object.\nDefault is ipv4")
secondNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 64), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setDescription("The address of the second ntp server.")
wireCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCount.setDescription("The number of wires.")
transferSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCount.setDescription("The number of transfer switches.")
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 67), ProductTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setDescription("The product type.\nIs this product a PDU, STS, BCM,...?")
meteringControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringControllerCount.setDescription("The number of metering controllers.")
relayBehaviorOnPowerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 69), RelayPowerLossBehaviorEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayBehaviorOnPowerLoss.setDescription("The relay behavior on power loss.")
deviceCascadeType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 70), DeviceCascadeTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceCascadeType.setDescription("The configured type of cascading:\ndefault is bridging.\nThis can be set only if the unit is the master.")
deviceCascadePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCascadePosition.setDescription("The position of the device in the cascaded chain.\n0: master\n>= 1: slaves  ")
peripheralDevicesAutoManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setDescription("Auto-management enabled state for peripheral devices.")
frontPanelOutletSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 73), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelOutletSwitching.setDescription("Enables/disables switching of outlets using the PDU front panel.")
frontPanelRCMSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelRCMSelfTest.setDescription("Enables/disables front panel RCM self-test.")
frontPanelActuatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelActuatorControl.setDescription("Enables/disables front panel peripheral actuator control.")
controllerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3))
if mibBuilder.loadTexts: controllerConfigurationTable.setDescription("A list of entries for the boards in each PDU. The number of\nentries is given by the value of \n inletControllerCount + outletControllerCount + 1 (for main controller board).")
controllerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "boardType"), (0, "PDU2-MIB", "boardIndex"))
if mibBuilder.loadTexts: controllerConfigurationEntry.setDescription("An  entry containing objects for a controller.")
boardType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 1), BoardTypeEnumeration()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: boardType.setDescription("The type of board.")
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: boardIndex.setDescription("A unique value for each controller. Its value\nranges between 1 and the value of \n   inletControllerCount + outletControllerCount + 1.")
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVersion.setDescription("The board hardware version.")
boardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareVersion.setDescription("The firmware version.")
boardFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareTimeStamp.setDescription("The time when the board firmware was updated in UNIX(epoch)time.\nIt is measured in seconds relative to January 1, 1970 (midnight UTC/GMT), \ni.e a value of 0 indicates January 1, 1970 (midnight UTC/GMT).")
logConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4))
if mibBuilder.loadTexts: logConfigurationTable.setDescription("A table of parameters for the data logging feature. The number of\nentries is given by the value of pduCount.")
logConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logConfigurationEntry.setDescription("An entry containing data logging parameters\nfor a particular PDU.")
dataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setDescription("Data Retrieval: enabled/disabled.")
measurementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setDescription("Data Collection periodicity. This is the periodicity of the data collected by the PX.\nThis value is fixed at 1 second.")
measurementsPerLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setDescription("The number of measurements used for each entry in the log.")
logSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setDescription("The number of entries in the log.")
dataLoggingEnableForAllSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setDescription("Operation to control data logging for all sensors.\nIf this OID is set to true, then all xxxSensorLogAvailable are set to true\nIf this OID is set to false, then all xxxSensorLogAvailable are set to false")
unitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5))
if mibBuilder.loadTexts: unitSensorConfigurationTable.setDescription("A list of unit level sensors for a PDU.")
unitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorConfigurationEntry.setDescription("An entry containing unit sensor parameters.")
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 1), SensorTypeEnumeration()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sensorType.setDescription("The type of sensor.")
unitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLogAvailable.setDescription("Is logging enabled for the sensor?")
unitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorUnits.setDescription("The  units in which the sensor data is reported.")
unitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.")
unitSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value.")
unitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \nunitSensorDecimalDigits.  For example, if the value is 1 and \nunitSensorDecimalDigits is 2, then actual value is 0.01.")
unitSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(unitSensorDecimalDigits + 1).  For example, if the value is 50 and \nunitSensorDecimalDigits is 2, then actual value is 0.05.")
unitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as \nit is detected; if it is non-zero, say n, then the assertion \ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
unitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3))
inletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3))
if mibBuilder.loadTexts: inletConfigurationTable.setDescription("A list of inlet configuration entries. The number of\nentries is given by the value of inletCount for the PDU.")
inletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: inletConfigurationEntry.setDescription("An entry containing parametersfor a particular inlet.")
inletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: inletId.setDescription("A unique value for each inlet. Its value\nranges between 1 and the value of inletCount.")
inletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletLabel.setDescription("The label on the PDU identifying the inlet.")
inletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletName.setDescription("The user-defined name.")
inletPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 4), PlugTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlug.setDescription("The type of plug/receptacle wired to the inlet.")
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setDescription("The number of poles. For inlets with neutral poles, this number will \ninclude the neutral pole; however, sensors are not supported for \nneutral poles")
inletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVoltage.setDescription("The inlet voltage rating.")
inletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedCurrent.setDescription("The inlet current rating.")
inletRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedFrequency.setDescription("The inlet frequency rating.")
inletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVA.setDescription("The inlet VA (VoltAmps) rating.")
inletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 10), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 26), ("rcmState", 27), ("rmsVoltage", 3), ("powerQuality", 31), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletDeviceCapabilities.setDescription("A bit string  which indicates which inlet sensors are available.")
inletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 11), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltageLN", 24), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCapabilities.setDescription("A bit string  which indicates which inletpole sensors are available.")
inletPlugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlugDescriptor.setDescription("Description of the Plug")
inletEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletEnableState.setDescription("Is this PDU operation is enabled for this inlet?\nWhen PDU operation is disabled the sensors for this inlet and all\nchildren will no longer be updated, and outlet switching is no longer\nallowed. This is only meaningful for multi-inlet units if one inlet\nis temporarily expected to be powered down.\nDisabling the inlet of a single-inlet unit is forbidden and any\nattempt to do so will result in an error.")
inletRCMResidualOperatingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletRCMResidualOperatingCurrent.setDescription("The Residual Operating Current (Threshold) for the RCM State sensor. \nFor inlets without an RCM, any attempt to access this OID will return \nNoSuchInstance error. The value of this OID is in milliamps.")
inletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4))
if mibBuilder.loadTexts: inletSensorConfigurationTable.setDescription("A list of configuration entries for an inlet sensor.")
inletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorConfigurationEntry.setDescription("An entry containing objects for configuring an inlet sensor.")
inletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLogAvailable.setDescription("Is logging enabled for the sensor?")
inletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorUnits.setDescription("The base units.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \ninletSensorDecimalDigits.  For example, if the value is 1 and \ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(inletSensorDecimalDigits + 1).  For example, if the value is 50 and \ninletSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6))
if mibBuilder.loadTexts: inletPoleSensorConfigurationTable.setDescription("A list of configuration entries for an inlet pole sensor.")
inletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorConfigurationEntry.setDescription("An entry containing objects \nfor configuring an inlet pole sensor.")
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: inletPoleIndex.setDescription("A unique value for each inlet Pole. Its value\nranges between 1 and the value of inletPoleCount.")
inletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLogAvailable.setDescription("Is logging enabled for the sensor?")
inletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorUnits.setDescription("The base units.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \ninletPoleSensorDecimalDigits.  For example, if the value is 1 and \ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(inletPoleSensorDecimalDigits + 1).  For example, if the value is 50 and \ninletPoleSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
inletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
overCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4))
overCurrentProtectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3))
if mibBuilder.loadTexts: overCurrentProtectorConfigurationTable.setDescription("A list of overCurrentProtector configuration entries. The number of\nentries is given by the value of overCurrentProtectorCount for the PDU.")
overCurrentProtectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"))
if mibBuilder.loadTexts: overCurrentProtectorConfigurationEntry.setDescription("An entry containing objects for a particular overCurrentProtector.")
overCurrentProtectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: overCurrentProtectorIndex.setDescription("A unique value for each overcurrent protector. Its value\nranges between 1 and the value of overCurrentProtectorCount.")
overCurrentProtectorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorLabel.setDescription("The label on the PDU identifying the overcurrent protector.")
overCurrentProtectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorName.setDescription("The user-defined name.")
overCurrentProtectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 4), OverCurrentProtectorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorType.setDescription("The type of overcurrent protector.")
overCurrentProtectorRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorRatedCurrent.setDescription("The current rating.")
overCurrentProtectorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 9), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("trip", 14), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCapabilities.setDescription("A bit string  which indicates which overcurrent protector sensors are available.")
overCurrentProtectorPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\noverCurrentProtector's power source which can one of the following:\n       overCurrentProtector\n       transfer switch\n       inlet\n\nIf the power source is an OverCurrentProtector, it\ncontains the OID of an overCurrentProtectorLabel in the\noverCurrentProtectorConfiguration Table. The index of the OID can then be\nused to reference other objects in the overCurrentProtectorConfigurationTable.\n\nIf the power source is an inlet, it contains the OID of\nan inletLabel in the inletConfigurationTable. The index of the OID can\nthen be used to reference other objects in the inletConfigurationTable.\n\nIf the power source is a transferSwitch, it\ncontains the OID of a transferSwitchLabel in the\ntransferSwitchConfiguration Table. The index of the OID can then be\nused to reference other objects in the transferSwitchConfigurationTable.        ")
overCurrentProtectorSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4))
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationTable.setDescription("A list of overCurrentProtectorSensor configuration entries.")
overCurrentProtectorSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationEntry.setDescription("An overCurrentProtectorSensor entry containing objects for a \nparticular overCurrentProtector Sensor.")
overCurrentProtectorSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLogAvailable.setDescription("Is logging available for this sensor?")
overCurrentProtectorSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorUnits.setDescription("The base units\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \noverCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and \noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(overCurrentProtectorSensorDecimalDigits + 1).  For example, if the value is 50 and \noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
overCurrentProtectorSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5))
outletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3))
if mibBuilder.loadTexts: outletConfigurationTable.setDescription("A list of outlet configuration entries. The number of\nentries is given by the value of outletCount for the PDU.")
outletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletConfigurationEntry.setDescription("An outlet entry containing parameters for a particular outlet.")
outletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: outletId.setDescription("A unique value for each outlet. Its value\nranges between 1 and the value of outletCount.")
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLabel.setDescription("The label on the PDU identifying the outlet.")
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setDescription("The user-defined name.")
outletReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 4), ReceptacleTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacle.setDescription("The plug.")
outletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCount.setDescription("The number of poles.")
outletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVoltage.setDescription("The outlet voltage rating.")
outletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedCurrent.setDescription("The outlet current rating.")
outletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVA.setDescription("The outlet VA (VoltAmps) rating.")
outletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 10), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("onOff", 13), ("unbalancedCurrent", 2), ("frequency", 22), ("phaseAngle", 23), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletDeviceCapabilities.setDescription("A bit string  which indicates which outlet sensors are available.")
outletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 11), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltageLN", 24), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCapabilities.setDescription("A bit string  which indicates which outlet pole sensors are available.")
outletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerCyclingPowerOffPeriod.setDescription("The power-off period when an outlet is cycled;\noverrides the global value;\nspecified in seconds; \n0 <= value <= 3600 seconds.")
outletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 13), OutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletStateOnStartup.setDescription("The outlet state on device startup;\noverrides the global value.\n Note that this value is ignored if\n relayBehaviorOnPowerLoss is set to latching.")
outletUseGlobalPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletUseGlobalPowerCyclingPowerOffPeriod.setDescription("If this true, then use globalOutletPowerCyclingPowerOffPeriod.")
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setDescription("Is this outlet switchable?")
outletReceptacleDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacleDescriptor.setDescription("Description of the Receptacle")
outletNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletNonCritical.setDescription("Is this outlet non-critical?")
outletSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequenceDelay.setDescription("The time interval between switching on this outlet and the next outlet in the\noutlet sequence. \nThis applies to the following operations.\n 1) Switch all outlets on operation is executed\n 2) Power to the PDU is cycledThis applies only when all outlets are being switched on or cycled. \nIt is specified in seconds; \n1 <= value <= 3600 seconds.\nThe actual time interval used can never be less than  the inrushGuardDelay defined \nin the unitConfigurationTable.\nExamples: \n  1)  inrush Guard Delay is 2 seconds and outletSequenceDelay is 5 seconds.\n      The time interval will be 5 seconds \n  2)  inrush Guard Delay is 5 seconds and outletSequenceDelay is 2 seconds.\n      The time interval will be 5 seconds")
outletPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 33), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\noutlet's power source which can one of the following:\n       overCurrentProtector\n       transfer switch\n       inlet\n\nIf the power source is an OverCurrentProtector, it\ncontains the OID of an overCurrentProtectorLabel in the\noverCurrentProtectorConfiguration Table. The index of the OID can then be\nused to reference other objects in the overCurrentProtectorConfigurationTable.\n\nIf the power source is an inlet, it contains the OID of\nan inletLabel in the inletConfigurationTable. The index of the OID can\nthen be used to reference other objects in the inletConfigurationTable.\n\nIf the power source is a transferSwitch, it\ncontains the OID of a transferSwitchLabel in the\ntransferSwitchConfiguration Table. The index of the OID can then be\nused to reference other objects in the transferSwitchConfigurationTable.")
outletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4))
if mibBuilder.loadTexts: outletSensorConfigurationTable.setDescription("A list of outlet configuration entries. The number of\nentries is given by the value of outletCount for the PDU.")
outletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorConfigurationEntry.setDescription("An entry containing parameters for an outlet sensor.")
outletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLogAvailable.setDescription("Is logging available for this sensor?")
outletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorUnits.setDescription("The base units.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \noutletSensorDecimalDigits.  For example, if the value is 1 and \noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(outletSensorDecimalDigits + 1).  For example, if the value is 50 and \noutletSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6))
if mibBuilder.loadTexts: outletPoleSensorConfigurationTable.setDescription("A list of outlet pole sensor configuration entries. The number of\nentries is given by the value of outletPoleCount.")
outletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorConfigurationEntry.setDescription("An entry containing objects \nfor configuring an outlet pole sensor.")
outletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: outletPoleIndex.setDescription("A unique value for each outlet Pole. Its value\nranges between 1 and the value of outletPoleCount.")
outletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLogAvailable.setDescription("Is logging enabled for the sensor?")
outletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorUnits.setDescription("The base units.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \noutletPoleSensorDecimalDigits.  For example, if the value is 50 and \noutletPoleSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(outletPoleSensorDecimalDigits + 1).  For example, if the value is 50 and \noutletPoleSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
outletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6))
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3))
if mibBuilder.loadTexts: externalSensorConfigurationTable.setDescription("A list of externalSensor configuration entries. The number of\nentries is given by the value of externalSensorCount for the PDU.")
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setDescription("An entry containing parameters for an external sensor.")
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sensorID.setDescription("A unique value for each sensor. Its value\nranges between 1 and the value of externalSensorCount.")
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setDescription("The type of sensor.")
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setDescription("The sensor serial number.")
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setDescription("The user-defined name.")
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setDescription("The user-defined description.")
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setDescription("The X coordinate.")
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setDescription("The Y coordinate.")
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setDescription("The Z coordinate.")
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setDescription("The channel number, applies only to contact sensors;\n-1 for other sensors")
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setDescription("The subtype of the binary sensor")
externalSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLogAvailable.setDescription("Is logging available for this sensor?")
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setDescription("The base units\nThis parameter does not apply   \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point\nThis parameter does not apply  \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 18), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(externalSensorDecimalDigits + 1).  For example, if the value is 50 and \nexternalSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setDescription("The largest possible value\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setDescription("The smallest possible value\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion \ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nAt present, this value cannot be written (set)")
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setDescription("The lower critical threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setDescription("The lower non-critical (warning) threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setDescription("The upper critical  threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setDescription("The upper non-critical (warning) threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 35), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors ")
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setDescription("Is this an actuator?\nTrue:  It is an actuator\nFalse: It is not an actuator")
externalSensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPosition.setDescription("The position of the sensor.\nThe format is a semicolon separated list of Keyword:value pairs - Keyword1:Value1;Keyword2:value2;...\n   Keyword can be one of the following: ONBOARD,DEVICE-1WIREPORT;HUBPORT,CHAIN-POSITION\n   Examples\n  1)  Onboard Sensor\n            ONBOARD:CC1\n  2)  Old sensor connected to device 1-wire port \n            DEVICE-1WIREPORT:2\n  3)  Old sensor connected to hub port \n            DEVICE-1WIREPORT:2;HUBPORT:3\n  4)  New style sensor connected to device 1-wire port \n            DEVICE-1WIREPORT:2;CHAIN-POSITION:3\n  5)  Old style sensor connected to end of new style sensor chain \n            DEVICE-1WIREPORT:2;CHAIN-POSITION:7   \n ")
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setDescription("Use default thresholds for this sensor?\nTrue:  Use Default thresholds for this sensor\n       \nFalse: Do not Use Default thresholds for this sensor")
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setDescription("The delay in seconds for transitions from the alarmed state to the normal state.\nIf the sensor type is  motionDetection,\n	  then it can set to a value greater >= 0\nFor all other sensor types,\n	  the value is 0 and cannot be set to any other value.")
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setDescription("A list of entries listing the default thresholds for each sensor type. ")
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setDescription("An entry containing default thresholds for a sensor type.")
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion \ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nAt present, this value cannot be written (set)")
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setDescription("The lower critical threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setDescription("The lower non-critical (warning) threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setDescription("The upper critical  threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setDescription("The upper non-critical (warning) threshold\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply\nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors.")
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 9), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply \nto onOff, trip, vibration, waterDetection, \nsmokeDetection sensors ")
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5))
if mibBuilder.loadTexts: peripheralDevicePackageTable.setDescription("A list of entries for the peripheral Device Packages connected to each PDU. The number of\nentries is given by the value of peripheralDevicePackagesCount.")
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setDescription("An  entry containing objects for a controller.")
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: peripheralDevicePackageId.setDescription("A unique value for each peripheral device package.")
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setDescription("The peripheral device package  serial number.")
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setDescription("The peripheral device package  model.\nExamples are DX-D2C6, DPX2-T1, DPX2-T1H1, DPX2-T2H1, DPX2-T3H1")
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setDescription("The peripheral device package firmware version.")
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setDescription("The peripheral device package minimum firmware version.\nThis field may be empty. If it is not empty, then it shall not be possible\nto downgrade the peripheral device firmware to a \nversion < minimum firmware version number.")
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setDescription("The time when the peripheralDevicePackage firmware was updated in UNIX(epoch)time.\nIt is measured in seconds relative to January 1, 1970 (midnight UTC/GMT), \ni.e a value of 0 indicates January 1, 1970 (midnight UTC/GMT).")
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setDescription("The position of the package.\nThe format is a semicolon separated list of Keyword:value pairs -\n	 Keyword1:Value1;Keyword2:value2;...\n  Keyword can be one of the following:\n	 ONBOARD,DEVICE-1WIREPORT;HUBPORT,CHAIN-POSITION\n  Examples\n  1) Onboard Sensor\n		ONBOARD:CC1\n  2) Old sensor connected to device 1-wire port\n		DEVICE-1WIREPORT:2\n  3) Old sensor connected to hub port\n		DEVICE-1WIREPORT:2;HUBPORT:3\n  4) New style sensor connected to device 1-wire port\n		DEVICE-1WIREPORT:2;CHAIN-POSITION:3\n  5) Old style sensor connected to end of new style sensor chain\n		DEVICE-1WIREPORT:2;CHAIN-POSITION:7\n ")
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setDescription("The state of the package.")
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7))
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3))
if mibBuilder.loadTexts: serverReachabilityTable.setDescription("A list of server entries. The number of\nentries is given by the value of serverCount for the PDU.")
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setDescription("An entry containing parameters for a server.")
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: serverID.setDescription("A unique value for each server. Its value\nranges between 1 and the value of serverCount for that PDU")
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setDescription("The IP Address/host name of the server")
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setDescription("Is ping enabled for this server?")
wires = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8))
wireConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3))
if mibBuilder.loadTexts: wireConfigurationTable.setDescription("A list of wire configuration entries. The number of\nentries is given by the value of wireCount for the PDU.")
wireConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"))
if mibBuilder.loadTexts: wireConfigurationEntry.setDescription("An entry containing objects for a particular wire.")
wireId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: wireId.setDescription("A unique value for each wire. Its value\nranges between 1 and the value of wireCount.")
wireLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireLabel.setDescription("The label on the PDU identifying the wire.")
wireCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 3), Bits().subtype(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCapabilities.setDescription("A bit string  which indicates which wire sensors are available.")
wirePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirePowerSource.setDescription("This object allows discovery of how the PDU is wired. It indicates the\nwire's power source which can one of the following:\n       overCurrentProtector\n       transfer switch\n       inlet\n\nIf the power source is an OverCurrentProtector, it\ncontains the OID of an overCurrentProtectorLabel in the\noverCurrentProtectorConfiguration Table. The index of the OID can then be\nused to reference other objects in the overCurrentProtectorConfigurationTable.\n\nIf the power source is an inlet, it contains the OID of\nan inletLabel in the inletConfigurationTable. The index of the OID can\nthen be used to reference other objects in the inletConfigurationTable.\n\nIf the power source is a transferSwitch, it\ncontains the OID of a transferSwitchLabel in the\ntransferSwitchConfiguration Table. The index of the OID can then be\nused to reference other objects in the transferSwitchConfigurationTable.  ")
wireSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4))
if mibBuilder.loadTexts: wireSensorConfigurationTable.setDescription("A list of wireSensor configuration entries.")
wireSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorConfigurationEntry.setDescription("An wireSensor entry containing objects for a\nparticular wire Sensor.")
wireSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLogAvailable.setDescription("Is logging available for this sensor?")
wireSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorUnits.setDescription("The base units")
wireSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point.")
wireSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value")
wireSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits. For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by\n(wireSensorDecimalDigits + 1).  For example, if the value is 50 and\nwireSensorDecimalDigits is 2, then actual value is 0.05.")
wireSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMaximum.setDescription("The largest possible value\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMinimum.setDescription("The smallest possible value\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nAt present, this value cannot be written (set)")
wireSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerCriticalThreshold.setDescription("The lower critical threshold\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerWarningThreshold.setDescription("The lower non-critical (warning) threshold\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperCriticalThreshold.setDescription("The upper critical  threshold\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperWarningThreshold.setDescription("The upper non-critical (warning) threshold\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits.  For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.")
wireSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.")
transferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9))
transferSwitchConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3))
if mibBuilder.loadTexts: transferSwitchConfigurationTable.setDescription("A list of transfer switch configuration entries. The number of\nentries is given by the value of transferSwitchCount.")
transferSwitchConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchConfigurationEntry.setDescription("An entry containing objects for a particular transferSwitch.")
transferSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: transferSwitchId.setDescription("A unique value for each transfer switch. Its value\nranges between 1 and the value of transferSwitchCount.")
transferSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLabel.setDescription("The label on the PDU identifying the TS.")
transferSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchName.setDescription("The user-defined name of the transferSwitch.")
transferSwitchPreferredInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPreferredInlet.setDescription("The preferred Inlet. The TS powers the outlet from the preferred inlet when acceptable power\nis available from the preferred inlet.   ")
transferSwitchAutoReTransferEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferEnabled.setDescription("The TS can be configured to automatically retransfer back to the preferred inlet when power is restored.  \nRe-transfer only occurs if this variable is true.")
transferSwitchAutoReTransferWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferWaitTime.setDescription("The Auto Re-Transfer Wait Time. Re-transfer occurs this many seconds after the condition causing the \noriginal transfer has been corrected.")
transferSwitchAutoReTransferRequiresPhaseSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferRequiresPhaseSync.setDescription("If this parameter is False, then do not retransfer if there is a PHASE_SYNC_FAULT in effect. A \nPHASE_SYNC_FAULT occurs when the phase difference between the inlets is too high.")
transferSwitchFrontPanelManualTransferButtonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchFrontPanelManualTransferButtonEnabled.setDescription("If this parameter is false, then  manual transfers caused by pressing the front panel switch are disabled. ")
transferSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 24), Bits().subtype(namedValues=NamedValues(("overloadStatus", 32), ("inletPhaseSyncAngle", 37), ("inletPhaseSync", 38), ("operatingState", 39), ("activeInlet", 40), ("switchStatus", 47), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCapabilities.setDescription("A bit string  which indicates which sensors are available for the transfer switch.")
transferSwitchPowerSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 31), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource1.setDescription("This object allows discovery of how the PDU is wired. It indicates the\ntransferSwitch's first power source which can one of the following:\n       overCurrentProtector\n       transfer switch\n       inlet\n\nIf the power source is an OverCurrentProtector, it\ncontains the OID of an overCurrentProtectorLabel in the\noverCurrentProtectorConfiguration Table. The index of the OID can then be\nused to reference other objects in the overCurrentProtectorConfigurationTable.\n\nIf the power source is an inlet, it contains the OID of\nan inletLabel in the inletConfigurationTable. The index of the OID can\nthen be used to reference other objects in the inletConfigurationTable.\n\nIf the power source is a transferSwitch, it\ncontains the OID of a transferSwitchLabel in the\ntransferSwitchConfiguration Table. The index of the OID can then be\nused to reference other objects in the transferSwitchConfigurationTable.                 ")
transferSwitchPowerSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 32), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource2.setDescription("This object allows discovery of how the PDU is wired. It indicates the\ntransferSwitch's second power source which can one of the following:\n       overCurrentProtector\n       transfer switch\n       inlet\n\nIf the power source is an OverCurrentProtector, it\ncontains the OID of an overCurrentProtectorLabel in the\noverCurrentProtectorConfiguration Table. The index of the OID can then be\nused to reference other objects in the overCurrentProtectorConfigurationTable.\n\nIf the power source is an inlet, it contains the OID of\nan inletLabel in the inletConfigurationTable. The index of the OID can\nthen be used to reference other objects in the inletConfigurationTable.\n\nIf the power source is a transferSwitch, it\ncontains the OID of a transferSwitchLabel in the\ntransferSwitchConfiguration Table. The index of the OID can then be\nused to reference other objects in the transferSwitchConfigurationTable       ")
transferSwitchSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4))
if mibBuilder.loadTexts: transferSwitchSensorConfigurationTable.setDescription("A list of transfer switch sensor configuration entries. ")
transferSwitchSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorConfigurationEntry.setDescription("An entry containing parameters for a transfer switch sensor.")
transferSwitchSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLogAvailable.setDescription("Is logging available for this sensor?")
transferSwitchSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorUnits.setDescription("The base units.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorDecimalDigits.setDescription("The number of digits displayed to the right of the decimal point\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorAccuracy.setDescription("The accuracy: how close (in percent) the measurement is to the actual value\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorResolution.setDescription("The resolution: the minimum difference between any two measured values\nThe value of this OID variable should be scaled by \ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and \ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorTolerance.setDescription("The resolution: the  difference between a sensor value and the actual value\nThe value of this OID variable should be scaled by \n(transferSwitchSensorDecimalDigits + 1).  For example, if the value is 50 and \ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.05.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMaximum.setDescription("The largest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled maximum exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMinimum.setDescription("The smallest possible reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorHysteresis.setDescription("The hysteresis used for deassertions\nThe value of this OID variable should be scaled by \ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorStateChangeDelay.setDescription("The delay measured in samples before a state is asserted.\nIf the value is zero, then the state is asserted as soon as\nit is detected; if it is non-zero, say n, then the assertion\ncondition must exist for n+1 consecutive samples before the corresponding\nassertion event is reported.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerCriticalThreshold.setDescription("The lower critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerWarningThreshold.setDescription("The lower warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperCriticalThreshold.setDescription("The upper critical threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperWarningThreshold.setDescription("The upper warning threshold as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is clamped if the scaled threshold exceeds 4294967295. It\nis undefined for sensors which can have negative readings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 25), Bits().subtype(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorEnabledThresholds.setDescription("A bit string  which indicates which thresholds are enabled.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMaximum.setDescription("The largest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMinimum.setDescription("The smallest possible reading as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value determines whether to use the signed or unsigned threshold\nand value columns: If the minimum is below zero the sensor can have\nnegative readings and the signed columns should be used.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerCriticalThreshold.setDescription("The lower critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerWarningThreshold.setDescription("The lower warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperCriticalThreshold.setDescription("The upper critical threshold as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
transferSwitchSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperWarningThreshold.setDescription("The upper warning threshold as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThe value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1))
outletSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2))
if mibBuilder.loadTexts: outletSwitchControlTable.setDescription("A list of outlets for a PDU. The number of\nentries is given by the value of outletCount.")
outletSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletSwitchControlEntry.setDescription("An entry for implementing switching operations on an outlet.")
switchingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 2), OutletSwitchingOperationsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchingOperation.setDescription("The switching operation.")
outletSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingState.setDescription("The outlet state at present")
outletSwitchingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingTimeStamp.setDescription("The  timestamp indicating when the outlet was last switched")
externalSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 2))
transferSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3))
transferSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1))
if mibBuilder.loadTexts: transferSwitchControlTable.setDescription("A list of transfer switches for a PDU. The number of\nentries is given by the value of transferSwitchCount.")
transferSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchControlEntry.setDescription("An entry for implementing switching operations on a transfer switch.")
transferSwitchActiveInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchActiveInlet.setDescription("The index of the currently active inlet.")
transferSwitchTransferToInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchTransferToInlet.setDescription("Select the active inlet. If the new inlet is available, it will become\nboth active and preferred, otherwise an inconsistentValue error will\nbe returned.\nBy default the switching operation will fail if the phase difference\nbetween the inlets is too large. In this case the switch can be forced\nby writing transferSwitchAlarmOverride as True in the same request.\nThis variable will always read as 0.")
transferSwitchAlarmOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAlarmOverride.setDescription("Force transfer even if the phase difference between the inlets is too\nlarge.\nThis may only be written together with transferSwitchTransferToInlet,\notherwise an inconsistentValue error will be returned. Always reads as\nfalse.")
transferSwitchLastTransferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 4), TransferSwitchTransferReasonEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLastTransferReason.setDescription("The reason for the most recent transfer")
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4))
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2))
if mibBuilder.loadTexts: actuatorControlTable.setDescription("A list of actuators for a PDU. ")
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setDescription("An entry for implementing user-initiated state changes for an actuator.")
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setDescription("The actuator state.\nA Get operation retrieves the state of the actuator.\nA Set operation changes the stae of the sensor.\n    The valid states for set operations are on and Off.\n    Attempting to set the state to any other value will generate an error. ")
rcmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5))
rcmSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2))
if mibBuilder.loadTexts: rcmSelfTestTable.setDescription("A list of RCMs. ")
rcmSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: rcmSelfTestEntry.setDescription("An entry for implementing self test of an RCM.")
rcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcmState.setDescription("The rcm state.\nA Get operation retrieves the state of the RCM State Sensor.\nA Set operation changes the state of the sensor.\n    The valid state for set operations is selfTest.\n    When rcmState is set to selfTest, self test of the RCM starts.\n    Attempting to set the state to any other value will generate an error.\n    If the current state is selfTest, then an attempt to set the value to selfTest\n      will be ignored. \n                                       ")
inletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6))
inletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1))
if mibBuilder.loadTexts: inletSensorControlTable.setDescription("A list of control entries for the inlet sensors of a PDU. The set\nof valid indexes is defined by the value of inletCount and the\ninletDeviceCapabilities entry for the selected inlet.")
inletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorControlEntry.setDescription("An entry used for controlling an inlet sensor.")
inletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorResetValue.setDescription("Writing to this variable sets a new value for the addressed sensor. Only\naccumulating sensors (e.g. energy counters) can be reset, and currently\nthe only supported value is 0. Writing any other value returns an error.\nThis variable will always read as 0.")
outletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7))
outletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1))
if mibBuilder.loadTexts: outletSensorControlTable.setDescription("A list of control entries for the outlet sensors of a PDU. The set\nof valid indexes is defined by the value of outletCount and the\noutletDeviceCapabilities entry for the selected outlet.")
outletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorControlEntry.setDescription("An entry used for controlling an outlet sensor.")
outletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorResetValue.setDescription("Writing to this variable sets a new value for the addressed sensor. Only\naccumulating sensors (e.g. energy counters) can be reset, and currently\nthe only supported value is 0. Writing any other value returns an error.\nThis variable will always read as 0.")
unitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8))
unitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1))
if mibBuilder.loadTexts: unitSensorControlTable.setDescription("A list of control entries for the global sensors of a PDU. The set\nof valid indexes is defined by the value of pduCount and the\npduDeviceCapabilities entry.")
unitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorControlEntry.setDescription("An entry used for controlling an global sensor.")
unitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorResetValue.setDescription("Writing to this variable sets a new value for the addressed sensor. Only\naccumulating sensors (e.g. energy counters) can be reset, and currently\nthe only supported value is 0. Writing any other value returns an error.\nThis variable will always read as 0.")
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5))
measurementsUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1))
unitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3))
if mibBuilder.loadTexts: unitSensorMeasurementsTable.setDescription("A list of unit sensor entries.")
unitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an unit sensor.")
measurementsUnitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorIsAvailable.setDescription("Is the sensor available?")
measurementsUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorState.setDescription("The sensor state.")
measurementsUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. power supply status sensors.")
measurementsUnitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorTimeStamp.setDescription("The timestamp.")
measurementsUnitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. power supply status sensors.")
measurementsInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2))
inletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3))
if mibBuilder.loadTexts: inletSensorMeasurementsTable.setDescription("A list of inlet sensor entries. The number of\nentries is given by the value of inletCount for the PDU.")
inletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an inlet sensor.")
measurementsInletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorIsAvailable.setDescription("Is the sensor available?")
measurementsInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorState.setDescription("The sensor state.")
measurementsInletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
measurementsInletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorTimeStamp.setDescription("The timestamp.")
measurementsInletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. surge protector status sensors.")
inletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4))
if mibBuilder.loadTexts: inletPoleSensorMeasurementsTable.setDescription("A list of inletPole sensor entries. The number of\nentries is given by the value of inletPoleCount for the inlet.")
inletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an inletPole sensor.")
measurementsInletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorIsAvailable.setDescription("Is the sensor available?")
measurementsInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorState.setDescription("The sensor state.")
measurementsInletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading.")
measurementsInletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorTimeStamp.setDescription("The timestamp.")
measurementsInletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
measurementsOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3))
overCurrentProtectorSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3))
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsTable.setDescription("A list of overCurrentProtector sensor entries. The number of\nentries is given by the value of overCurrentProtectorCount for the PDU.")
overCurrentProtectorSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an overCurrentProtector.")
measurementsOverCurrentProtectorSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorIsAvailable.setDescription("Is the sensor available?")
measurementsOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorState.setDescription("The sensor state.")
measurementsOverCurrentProtectorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
measurementsOverCurrentProtectorSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorTimeStamp.setDescription("The timestamp.")
measurementsOverCurrentProtectorSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits. For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. trip sensors.")
measurementsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4))
outletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3))
if mibBuilder.loadTexts: outletSensorMeasurementsTable.setDescription("A list of outlet sensor entries. The number of\nentries is given by the value of outletCount for the PDU.")
outletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an outlet sensor.")
measurementsOutletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorIsAvailable.setDescription("Is the sensor available?")
measurementsOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorState.setDescription("The sensor state.")
measurementsOutletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
measurementsOutletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorTimeStamp.setDescription("The timestamp.")
measurementsOutletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. outlet state sensors.")
outletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4))
if mibBuilder.loadTexts: outletPoleSensorMeasurementsTable.setDescription("A list of outletPole sensor entries. The number of\nentries is given by the value of outletPoletCount for the outlet.")
outletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an outletPole sensor.")
measurementsOutletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorIsAvailable.setDescription("Is the sensor available?")
measurementsOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorState.setDescription("The sensor state.")
measurementsOutletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 50 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.05.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading.")
measurementsOutletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorTimeStamp.setDescription("The timestamp.")
measurementsOutletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 50 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.05.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading.")
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5))
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3))
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setDescription("A list of external sensor entries. The number of\nentries is given by the value of externalSensorCount for the PDU.")
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setDescription("An entry containing measurement objects for an external sensor.")
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setDescription("Is the sensor available?")
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setDescription("The sensor state.")
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\nexternalSensorDecimalDigits.  For example, if the value is 1 and\nexternalSensorDecimalDigits is 2, then actual value is 0.01.\nThis parameter does not apply to sensors without numerical reading,\ne.g. contact closure or smoke detection sensors.")
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setDescription("The sensor reading timestamp.")
measurementsWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6))
wireSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3))
if mibBuilder.loadTexts: wireSensorMeasurementsTable.setDescription("A list of wire sensor entries. The number of\nentries is given by the value of wireCount for the PDU.")
wireSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorMeasurementsEntry.setDescription("An entry containing measurement objects for a wire.")
measurementsWireSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorIsAvailable.setDescription("Is the sensor available?")
measurementsWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorState.setDescription("The sensor state.")
measurementsWireSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorValue.setDescription("The sensor value.\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits. For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the value exceeds 4294967295\nThis parameter does not apply to sensors without numerical reading.")
measurementsWireSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorTimeStamp.setDescription("The timestamp.")
measurementsTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7))
transferSwitchSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3))
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsTable.setDescription("A list of transfer switch sensor entries. The number of\nentries is given by the value of transferSwitchCount for the PDU.")
transferSwitchSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsEntry.setDescription("An entry containing measurement objects for a transfer switch.")
measurementsTransferSwitchSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorIsAvailable.setDescription("Is the sensor available?")
measurementsTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorState.setDescription("The sensor state.")
measurementsTransferSwitchSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorValue.setDescription("The sensor reading as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
measurementsTransferSwitchSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorTimeStamp.setDescription("The timestamp.")
measurementsTransferSwitchSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorSignedValue.setDescription("The sensor reading as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).\nThis parameter does not apply to sensors without numerical reading,\ne.g. operational state or switch fault sensors.")
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1))
logIndexTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1))
if mibBuilder.loadTexts: logIndexTable.setDescription("A table of log entries.")
logIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1)).setIndexNames((0, "PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logIndexEntry.setDescription("An entry in the log containing sensor data.")
oldestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setDescription("The index of the oldest data in the buffer for this PDU.")
newestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setDescription("The index of the newest data in the buffer for this PDU.")
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2))
if mibBuilder.loadTexts: logTimeStampTable.setDescription("A list of entries containing the timestamps of the entries in the log.")
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setDescription("An entry containing the timestamp for log entries.")
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: logIndex.setDescription("A unique value for each entry in the log. Its value\nranges between 1 and the value of logSize.")
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setDescription("The time when the data was collected. It is measured in seconds relative to\nJanuary 1, 1970 (midnight UTC/GMT), i.e a value of 0 indicates\nJanuary 1, 1970 (midnight UTC/GMT).")
unitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3))
if mibBuilder.loadTexts: unitSensorLogTable.setDescription("A list of unit sensor entries in the log.")
unitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: unitSensorLogEntry.setDescription("An entry containing log objects for an unit sensor.")
logUnitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorState.setDescription("The sensor state.")
logUnitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logUnitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logUnitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logUnitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logUnitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logUnitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\nunitSensorDecimalDigits.  For example, if the value is 1 and\nunitSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2))
inletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3))
if mibBuilder.loadTexts: inletSensorLogTable.setDescription("A list of inlet sensor entries. The number of\nentries is given by the value of inletCount for the PDU.")
inletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletSensorLogEntry.setDescription("An entry containing log objects for an inlet sensor.")
logInletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorState.setDescription("The sensor state.")
logInletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logInletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logInletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletSensorDecimalDigits.  For example, if the value is 1 and\ninletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
inletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4))
if mibBuilder.loadTexts: inletPoleSensorLogTable.setDescription("A list of inletPole sensor entries. The number of\nentries is given by the value of inletPoleCount for the inlet.")
inletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "inletId"), (0, "PDU2-MIB", "inletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletPoleSensorLogEntry.setDescription("An entry containing log objects for an inletPole sensor.")
logInletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorState.setDescription("The sensor state.")
logInletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logInletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logInletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logInletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ninletPoleSensorDecimalDigits.  For example, if the value is 1 and\ninletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3))
overCurrentProtectorSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3))
if mibBuilder.loadTexts: overCurrentProtectorSensorLogTable.setDescription("A list of overCurrentProtector sensor entries. The number of\nentries is given by the value of overCurrentProtectorCount for the PDU.")
overCurrentProtectorSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "overCurrentProtectorIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: overCurrentProtectorSensorLogEntry.setDescription("An entry containing log objects for an overCurrentProtector sensor.")
logOverCurrentProtectorSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorState.setDescription("The sensor state.")
logOverCurrentProtectorSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOverCurrentProtectorSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOverCurrentProtectorSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOverCurrentProtectorSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOverCurrentProtectorSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOverCurrentProtectorSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noverCurrentProtectorSensorDecimalDigits.  For example, if the value is 1 and\noverCurrentProtectorSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4))
outletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3))
if mibBuilder.loadTexts: outletSensorLogTable.setDescription("A list of outlet sensor entries. The number of\nentries is given by the value of outletCount for the PDU.")
outletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletSensorLogEntry.setDescription("An entry containing log objects for an outlet sensor.")
logOutletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorState.setDescription("The sensor state.")
logOutletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOutletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOutletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletSensorDecimalDigits.  For example, if the value is 1 and\noutletSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
outletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4))
if mibBuilder.loadTexts: outletPoleSensorLogTable.setDescription("A list of outletPole sensor entries. The number of\nentries is given by the value of outletPoleCount for the outlet.")
outletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "outletId"), (0, "PDU2-MIB", "outletPoleIndex"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletPoleSensorLogEntry.setDescription("An entry containing log objects for an outletPole sensor.")
logOutletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorState.setDescription("The sensor state.")
logOutletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logOutletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOutletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logOutletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\noutletPoleSensorDecimalDigits.  For example, if the value is 1 and\noutletPoleSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5))
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3))
if mibBuilder.loadTexts: externalSensorLogTable.setDescription("A list of external sensor entries. The number of\nentries is given by the value of externalSensorCount for the PDU.")
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "sensorID"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setDescription("An entry containing log objects for an external sensor.")
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setDescription("The sensor state.")
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setDescription("The sensor reading average value.\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.")
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setDescription("The sensor reading maximum value.\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.")
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setDescription("The sensor reading minimum value.\nThe value of this OID variable should be scaled by \nexternalSensorDecimalDigits.  For example, if the value is 1 and \nexternalSensorDecimalDigits is 2, then actual value is 0.01.")
logWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6))
wireSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3))
if mibBuilder.loadTexts: wireSensorLogTable.setDescription("A list of wire sensor entries. The number of\nentries is given by the value of wireCount for the PDU.")
wireSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "wireId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: wireSensorLogEntry.setDescription("An entry containing log objects for a wire sensor.")
logWireSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorState.setDescription("The sensor state.")
logWireSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorAvgValue.setDescription("The sensor reading average value.\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits. For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the value exceeds 4294967295")
logWireSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMaxValue.setDescription("The sensor reading maximum value.\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits. For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the value exceeds 4294967295")
logWireSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMinValue.setDescription("The sensor reading minimum value.\nThe value of this OID variable should be scaled by\nwireSensorDecimalDigits. For example, if the value is 1 and\nwireSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the value exceeds 4294967295.")
logTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7))
transferSwitchSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3))
if mibBuilder.loadTexts: transferSwitchSensorLogTable.setDescription("A list of Transfer Switch sensor entries. The number of\nentries is given by the value of transferSwitchCount for the PDU.")
transferSwitchSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1)).setIndexNames((0, "PDU2-MIB", "pduId"), (0, "PDU2-MIB", "transferSwitchId"), (0, "PDU2-MIB", "sensorType"), (0, "PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: transferSwitchSensorLogEntry.setDescription("An entry containing log objects for a transfer switch sensor.")
logTransferSwitchSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorDataAvailable.setDescription("Is data available for this sensor during this measurement period?")
logTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorState.setDescription("The sensor state.")
logTransferSwitchSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorAvgValue.setDescription("The average sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logTransferSwitchSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMaxValue.setDescription("The maximum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logTransferSwitchSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMinValue.setDescription("The minimum sensor reading for the log period as an unsigned integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value will wrap around if the scaled sensor reading exceeds\n4294967295. It is undefined for sensors which can have negative\nreadings.")
logTransferSwitchSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedAvgValue.setDescription("The average sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logTransferSwitchSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMaxValue.setDescription("The maximum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
logTransferSwitchSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMinValue.setDescription("The minimum sensor reading for the log period as a signed integer.\nThe value of this OID variable should be scaled by\ntransferSwitchSensorDecimalDigits.  For example, if the value is 1 and\ntransferSwitchSensorDecimalDigits is 2, then actual value is 0.01.\nThis value is undefined for sensors whose range exceeds the\nInteger32 range (-2147483648 .. 2147483647).")
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2))
reliability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10))
reliabilityData = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1))
reliabilityDataTableSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataTableSequenceNumber.setDescription("The sequence number for updates to the reliability data table")
reliabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2))
if mibBuilder.loadTexts: reliabilityDataTable.setDescription("A list of PDU reliability data entries.")
reliabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1)).setIndexNames((0, "PDU2-MIB", "reliabilityIndex"))
if mibBuilder.loadTexts: reliabilityDataEntry.setDescription("An entry containing reliability data for a particular PDU.")
reliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: reliabilityIndex.setDescription("Index of the entry in the table.")
reliabilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityId.setDescription("Unique ID of the entry.\nPOH\n    Power on hours.\n\nCB.<label>.TRIPCNT\n   Trip count of circuit breaker with label <label>.\n\nCTRL.<serial>.<addr>.MASTER.CSUMERRLASTHOUR\n   Number of checksum errors in slave (controller board) to master (CPU\n   board) communication in the last hour on controller with serial\n   number <serial> and bus address <addr>.\n\nCTRL.<serial>.<addr>.SLAVE.CSUMERRLASTHOUR\n  Number of checksum errors in master (CPU board) to slave (controller\n  board) communication in the last hour on controller with serial\n  number <serial> and bus address <addr>.\n\nCTRL.<serial>.<addr>.TOUTLASTHOUR\n  Number of communication timeouts to controller with serial\n  number <serial> and bus address <addr> in the last hour.\n\nCTRL.<serial>.<addr>.RLY.<num>.CYCLECNT\n  Number of cycles the relay <num> on the controller board with serial\n  number <serial> and bus address <addr> has made. A cycle is an\n  off->on followed by an on->off event later. The count is increased on\n  the off->on transition.\n\nCTRL.<serial>.<addr>.RLY.<num>.FAILLASTHOUR\n  Number of failed switching operations on relay <num> on the controller\n  board with serial number <serial> and bus address <addr> in the last\n  hour. It depends on the specific controller board hardware  and what\n  error conditions are detected.")
reliabilityDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataValue.setDescription("The normalized value")
reliabilityDataMaxPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataMaxPossible.setDescription("The maximum possible normalized value")
reliabilityDataWorstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataWorstValue.setDescription("The worst normalized value seen so far")
reliabilityDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataThreshold.setDescription("The normalized Threshold value ")
reliabilityDataRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawUpperBytes.setDescription("The Upper 4 bytes of the raw ( not normalized) data.\nreliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\nshould be combined and interpreted as a signed 64-bit value")
reliabilityDataRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawLowerBytes.setDescription("The lower 4 bytes of the raw ( not normalized) data.\nreliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\nshould be combined and interpreted as a signed 64-bit value")
reliabilityDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 9), Bits().subtype(namedValues=NamedValues(("invalidFlag", 0), ("oldValue", 1), ("criticalEntry", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataFlags.setDescription("Flags")
reliabilityErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2))
reliabilityErrorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2))
if mibBuilder.loadTexts: reliabilityErrorLogTable.setDescription("A list of PDU reliability ErrorLog entries. ")
reliabilityErrorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1)).setIndexNames((0, "PDU2-MIB", "reliabilityErrorLogIndex"))
if mibBuilder.loadTexts: reliabilityErrorLogEntry.setDescription("An entry containing reliability ErrorLog data for a particular PDU.")
reliabilityErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: reliabilityErrorLogIndex.setDescription("Index of the entry in the table.")
reliabilityErrorLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogId.setDescription("Unique ID of the entry.\nPOH\n    Power on hours.\n\nCB.<label>.TRIPCNT\n   Trip count of circuit breaker with label <label>.\n\nCTRL.<serial>.<addr>.MASTER.CSUMERRLASTHOUR\n   Number of checksum errors in slave (controller board) to master (CPU\n   board) communication in the last hour on controller with serial\n   number <serial> and bus address <addr>.\n\nCTRL.<serial>.<addr>.SLAVE.CSUMERRLASTHOUR\n  Number of checksum errors in master (CPU board) to slave (controller\n  board) communication in the last hour on controller with serial\n  number <serial> and bus address <addr>.\n\nCTRL.<serial>.<addr>.TOUTLASTHOUR\n  Number of communication timeouts to controller with serial\n  number <serial> and bus address <addr> in the last hour.\n\nCTRL.<serial>.<addr>.RLY.<num>.CYCLECNT\n  Number of cycles the relay <num> on the controller board with serial\n  number <serial> and bus address <addr> has made. A cycle is an\n  off->on followed by an on->off event later. The count is increased on\n  the off->on transition.\n\nCTRL.<serial>.<addr>.RLY.<num>.FAILLASTHOUR\n  Number of failed switching operations on relay <num> on the controller\n  board with serial number <serial> and bus address <addr> in the last\n  hour. It depends on the specific controller board hardware  and what\n  error conditions are detected.")
reliabilityErrorLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogValue.setDescription("The normalized value")
reliabilityErrorLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogThreshold.setDescription("The normalized Threshold value ")
reliabilityErrorLogRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawUpperBytes.setDescription("The Upper 4 bytes of the raw ( not normalized) data.\nreliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\nshould be combined and interpreted as a signed 64-bit value")
reliabilityErrorLogRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawLowerBytes.setDescription("The lower 4 bytes of the raw ( not normalized) data.\nreliabilityDataRawUpperBytes and reliabilityDataRawLowerBytes\nshould be combined and interpreted as a signed 64-bit value")
reliabilityErrorLogPOH = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogPOH.setDescription("The time of occurrence of the event measured from the last\ntime the PDU was powered on")
reliabilityErrorLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogTime.setDescription("The UTC time of occurrence of the event ")

# Augmentions

# Notifications

systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 1)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: systemStarted.setDescription("The system has started. ")
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 2)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: systemReset.setDescription("The system was reset. The conditions under which\nthis trap is sent include, but are not limited to, the following.\n  using the GUI - Maintenance->Reset Unit\n  using the CLI - reset pdu unit")
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 3)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userLogin.setDescription("A user logged in.")
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 4)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userLogout.setDescription("A user logged out.")
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 5)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userAuthenticationFailure.setDescription("A user authentication attempt failed.")
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 8)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userSessionTimeout.setDescription("A user session timed out.")
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 11)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userAdded.setDescription("A user was added to the system.")
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 12)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userModified.setDescription("A user was modified.")
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 13)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userDeleted.setDescription("A user was deleted from the system.")
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 14)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: roleAdded.setDescription("A role was added to the system.")
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 15)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: roleModified.setDescription("A role was modified.")
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 16)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: roleDeleted.setDescription("A role was deleted from the system.")
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 20)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceUpdateStarted.setDescription("The device update has started.")
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 21)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceUpdateCompleted.setDescription("The device update has completed.")
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 22)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userBlocked.setDescription("A blocked user tried to log in.")
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 23)).setObjects(*(("PDU2-MIB", "outletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "measurementsOutletSensorState"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: powerControl.setDescription("An outlet switching operation has been performed.\nNote that measurementsOutletSensorState represents the state of the outlet at the time the trap was sent. \nThis may be different from the final state of the outlet. For instance, \nif the outlet is cycled and the outlet cycle delay is 20 seconds, this variable will \nindicate OFF although the final state of the outlet will be ON. The final state of the\noutlet will be indicated in the outletSensorStateChange trap for the outlet onOff sensor.")
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 24)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "pxInetIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userPasswordChanged.setDescription("User password was changed.")
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 28)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: passwordSettingsChanged.setDescription("Strong password settings changed.")
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 38)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: firmwareValidationFailed.setDescription("Firmware validation failed.")
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 41)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: logFileCleared.setDescription("The log file has been cleared.")
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 53)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: bulkConfigurationSaved.setDescription("Bulk Configuration saved.")
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 54)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: bulkConfigurationCopied.setDescription("Bulk Configuration copied to the device.")
pduSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 60)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: pduSensorStateChange.setDescription("PDU Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsUnitSensorValue is undefined for sensors which can\nhave negative readings, measurementsUnitSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
inletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 61)).setObjects(*(("PDU2-MIB", "measurementsInletSensorSignedValue"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "measurementsInletSensorValue"), ) )
if mibBuilder.loadTexts: inletSensorStateChange.setDescription("Inlet Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsInletSensorValue is undefined for sensors which can\nhave negative readings, measurementsInletSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.\n\nFor an rcmState sensor transitioning to the fail state, the value is the residual current\njust before the sensor transitioned to the fail state i.e.\n if typeOfSensor = rcmState and measurementsInletSensorState = fail,\n   then measurementsInletSensorValue = the residual current just before the sensor transitioned to the fail state")
inletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 62)).setObjects(*(("PDU2-MIB", "inletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: inletPoleSensorStateChange.setDescription("Inlet Pole Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsInletPoleSensorValue is undefined for sensors which can\nhave negative readings, measurementsInletPoleSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
outletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 63)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "measurementsOutletSensorState"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: outletSensorStateChange.setDescription("Outlet Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsOutletSensorValue is undefined for sensors which can\nhave negative readings, measurementsOutletSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
outletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 64)).setObjects(*(("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: outletPoleSensorStateChange.setDescription("Outlet Pole Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsOutletPoleSensorValue is undefined for sensors which can\nhave negative readings, measurementsOutletPoleSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
overCurrentProtectorSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 65)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ) )
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChange.setDescription("Overcurrent Protector Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsOverCurrentProtectorSensorValue is undefined for sensors which can\nhave negative readings, measurementsOverCurrentProtectorSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 66)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: externalSensorStateChange.setDescription("External Sensor State Change.")
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 67)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setDescription("SMTP message transmission failure")
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 68)).setObjects(*(("PDU2-MIB", "errorDescription"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: ldapError.setDescription("LDAP Error occurred; errorDescription describes the error")
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 70)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceUpdateFailed.setDescription("The device update has failed.")
loadSheddingModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 71)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: loadSheddingModeEntered.setDescription("The PX has enetered Load Shedding Mode")
loadSheddingModeExited = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 72)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: loadSheddingModeExited.setDescription("The PX has exited Load Shedding Mode")
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 73)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "serverIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: pingServerEnabled.setDescription("The ping feature has been enabled")
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 74)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "serverIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: pingServerDisabled.setDescription("The ping feature has been disabled")
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 75)).setObjects(*(("PDU2-MIB", "serverIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: serverNotReachable.setDescription("The server is not reachable")
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 76)).setObjects(*(("PDU2-MIB", "serverIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: serverReachable.setDescription("The server is  reachable")
rfCodeTagConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 77)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: rfCodeTagConnected.setDescription("The RF Code Tag is Connected")
rfCodeTagDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 78)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: rfCodeTagDisconnected.setDescription("The RF Code Tag is Disconnected")
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 79)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "deviceChangedParameter"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceIdentificationChanged.setDescription("Device identification has changed")
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 80)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: usbSlaveConnected.setDescription("USB Connectivity to slave has been established")
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 81)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: usbSlaveDisconnected.setDescription("USB Connectivity to slave has been lost")
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 82)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: lhxSupportChanged.setDescription("The Schroff LHX Support has been either enabled or disabled.")
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 83)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setDescription("The user accepted the Restricted Service Agreement.")
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 84)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setDescription("The user declined the Restricted Service Agreement.")
wireSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 85)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: wireSensorStateChange.setDescription("Wire Sensor State Change.")
transferSwitchSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 86)).setObjects(*(("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "oldSensorState"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: transferSwitchSensorStateChange.setDescription("Transfer Switch Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsTransferSwitchSensorValue is undefined for sensors which can\nhave negative readings, measurementsTransferSwitchSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 88)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceSettingsSaved.setDescription("Device Settings have been saved.")
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 89)).setObjects(*(("PDU2-MIB", "userName"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: deviceSettingsRestored.setDescription("Device Settings have been restored.")
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 90)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: webcamInserted.setDescription("A webcam has been inserted")
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 91)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: webcamRemoved.setDescription("A webcam has been removed")
inletEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 92)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "inletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: inletEnabled.setDescription("PDU operation has been enabled for an inlet")
inletDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 93)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "inletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: inletDisabled.setDescription("PDU operation has been disabled for an inlet")
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 94)).setObjects(*(("PDU2-MIB", "serverIPAddress"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setDescription("The connection to the server could not be recovered")
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 95)).setObjects(*(("PDU2-MIB", "errorDescription"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: radiusError.setDescription("LDAP Error occurred; errorDescription describes the error")
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 96)).setObjects(*(("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "errorDescription"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: serverReachabilityError.setDescription("Server Reachability Error occurred; errorDescription describes the error.\nThis trap is sent when the Error state is entered.\nReasons for transitioning to the Error state include the following:\n       Unable to resolve the server hostname.  ")
inletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 97)).setObjects(*(("PDU2-MIB", "inletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: inletSensorReset.setDescription("An inlet sensor was reset.")
outletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 98)).setObjects(*(("PDU2-MIB", "outletLabel"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "userName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: outletSensorReset.setDescription("An outlet sensor was reset.")
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 99)).setObjects(*(("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setDescription("An unknown peripheral device was attached.")
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 100)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setDescription("The firmware update state of a peripheral device changed while \nperforming update to peripheralDevicePackageFirmwareVersion.")
unitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 101)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pxInetAddressType"), ("RFC1213-MIB", "sysName"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysLocation"), ("RFC1213-MIB", "sysContact"), ) )
if mibBuilder.loadTexts: unitSensorReset.setDescription("A global sensor was reset.")
unitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 102)).setObjects(*(("RFC1213-MIB", "sysName"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "agentInetPortNumber"), ("RFC1213-MIB", "sysContact"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "pduNumber"), ("RFC1213-MIB", "sysLocation"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "pxInetAddressType"), ) )
if mibBuilder.loadTexts: unitSensorStateChange.setDescription("Unit Sensor State Change.\nWhich value field to use depends on the metadata of the sensor.\nmeasurementsUnitSensorValue is undefined for sensors which can\nhave negative readings, measurementsUnitSensorSignedValue is\nundefined for sensors whose range exceeds the Integer32 range.\nBoth fields do not apply to sensors without numerical readings.")

# Groups

configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 1)).setObjects(*(("PDU2-MIB", "externalSensorTypeDefaultHysteresis"), ("PDU2-MIB", "transferSwitchSensorSignedMaximum"), ("PDU2-MIB", "outletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletSensorStateChangeDelay"), ("PDU2-MIB", "outletSensorHysteresis"), ("PDU2-MIB", "inletSensorSignedMaximum"), ("PDU2-MIB", "inletPoleCount"), ("PDU2-MIB", "logSize"), ("PDU2-MIB", "overCurrentProtectorSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorUseDefaultThresholds"), ("PDU2-MIB", "outletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletPoleSensorDecimalDigits"), ("PDU2-MIB", "pduSerialNumber"), ("PDU2-MIB", "unitSensorUpperWarningThreshold"), ("PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("PDU2-MIB", "externalOnOffSensorSubtype"), ("PDU2-MIB", "inletDeviceCapabilities"), ("PDU2-MIB", "inletSensorLogAvailable"), ("PDU2-MIB", "externalSensorEnabledThresholds"), ("PDU2-MIB", "overCurrentProtectorSensorLowerCriticalThreshold"), ("PDU2-MIB", "secondNTPServerAddressType"), ("PDU2-MIB", "outletSensorEnabledThresholds"), ("PDU2-MIB", "inletName"), ("PDU2-MIB", "transferSwitchSensorHysteresis"), ("PDU2-MIB", "overCurrentProtectorSensorUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchName"), ("PDU2-MIB", "outletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "externalSensorLogAvailable"), ("PDU2-MIB", "outletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "firstNTPServerAddressType"), ("PDU2-MIB", "outletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "deviceCascadePosition"), ("PDU2-MIB", "inletSensorMaximum"), ("PDU2-MIB", "outletPoleSensorDecimalDigits"), ("PDU2-MIB", "transferSwitchSensorUpperWarningThreshold"), ("PDU2-MIB", "managedExternalSensorCount"), ("PDU2-MIB", "pduRatedVA"), ("PDU2-MIB", "externalSensorResolution"), ("PDU2-MIB", "overCurrentProtectorRatedCurrent"), ("PDU2-MIB", "inletPoleSensorMinimum"), ("PDU2-MIB", "outletPoleCapabilities"), ("PDU2-MIB", "boardVersion"), ("PDU2-MIB", "outletPoleSensorLogAvailable"), ("PDU2-MIB", "boardFirmwareTimeStamp"), ("PDU2-MIB", "unitSensorSignedMaximum"), ("PDU2-MIB", "inletPoleSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletPoleSensorHysteresis"), ("PDU2-MIB", "inletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletUseGlobalPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "externalSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorStateChangeDelay"), ("PDU2-MIB", "outletSensorUnits"), ("PDU2-MIB", "pduManufacturer"), ("PDU2-MIB", "transferSwitchLabel"), ("PDU2-MIB", "measurementPeriod"), ("PDU2-MIB", "overCurrentProtectorSensorUpperWarningThreshold"), ("PDU2-MIB", "inletLabel"), ("PDU2-MIB", "outletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "outletPowerSource"), ("PDU2-MIB", "externalSensorYCoordinate"), ("PDU2-MIB", "serverPingEnabled"), ("PDU2-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("PDU2-MIB", "cascadedDeviceConnected"), ("PDU2-MIB", "outletSensorUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorMinimum"), ("PDU2-MIB", "inletPoleCapabilities"), ("PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("PDU2-MIB", "transferSwitchSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorResolution"), ("PDU2-MIB", "inletPoleSensorEnabledThresholds"), ("PDU2-MIB", "overCurrentProtectorSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchCount"), ("PDU2-MIB", "overCurrentProtectorSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorDecimalDigits"), ("PDU2-MIB", "unitSensorDecimalDigits"), ("PDU2-MIB", "firstNTPServerAddress"), ("PDU2-MIB", "inletRatedFrequency"), ("PDU2-MIB", "inletRatedVoltage"), ("PDU2-MIB", "unitDeviceCapabilities"), ("PDU2-MIB", "boardFirmwareVersion"), ("PDU2-MIB", "outletDeviceCapabilities"), ("PDU2-MIB", "inletSensorEnabledThresholds"), ("PDU2-MIB", "outletSensorLogAvailable"), ("PDU2-MIB", "outletPoleSensorResolution"), ("PDU2-MIB", "frontPanelRCMSelfTest"), ("PDU2-MIB", "transferSwitchSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorHysteresis"), ("PDU2-MIB", "meteringControllerCount"), ("PDU2-MIB", "transferSwitchSensorResolution"), ("PDU2-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("PDU2-MIB", "secondNTPServerAddress"), ("PDU2-MIB", "transferSwitchSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletPlug"), ("PDU2-MIB", "overCurrentProtectorSensorHysteresis"), ("PDU2-MIB", "inletCount"), ("PDU2-MIB", "outletSensorResolution"), ("PDU2-MIB", "globalOutletStateOnStartup"), ("PDU2-MIB", "peripheralDevicesAutoManagement"), ("PDU2-MIB", "measurementsPerLogEntry"), ("PDU2-MIB", "externalSensorMaximum"), ("PDU2-MIB", "outletRatedVA"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletControllerCount"), ("PDU2-MIB", "outletSensorLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("PDU2-MIB", "unitSensorLogAvailable"), ("PDU2-MIB", "transferSwitchSensorLogAvailable"), ("PDU2-MIB", "inletSensorHysteresis"), ("PDU2-MIB", "outletName"), ("PDU2-MIB", "outletPoleSensorMaximum"), ("PDU2-MIB", "inletSensorResolution"), ("PDU2-MIB", "externalSensorSerialNumber"), ("PDU2-MIB", "globalOutletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "deviceCascadeType"), ("PDU2-MIB", "outletSensorMaximum"), ("PDU2-MIB", "peripheralDevicePackageModel"), ("PDU2-MIB", "unitSensorUnits"), ("PDU2-MIB", "overCurrentProtectorCount"), ("PDU2-MIB", "unitSensorMinimum"), ("PDU2-MIB", "externalSensorChannelNumber"), ("PDU2-MIB", "unitSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "inletSensorLowerWarningThreshold"), ("PDU2-MIB", "externalSensorAlarmedToNormalDelay"), ("PDU2-MIB", "outletReceptacleDescriptor"), ("PDU2-MIB", "inletPoleSensorStateChangeDelay"), ("PDU2-MIB", "outletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorXCoordinate"), ("PDU2-MIB", "outletSensorMinimum"), ("PDU2-MIB", "inletPoleSensorMaximum"), ("PDU2-MIB", "transferSwitchSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorUnits"), ("PDU2-MIB", "inletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "frontPanelOutletSwitching"), ("PDU2-MIB", "externalSensorCount"), ("PDU2-MIB", "outletPoleSensorMinimum"), ("PDU2-MIB", "inletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inrushGuardDelay"), ("PDU2-MIB", "transferSwitchSensorMinimum"), ("PDU2-MIB", "unitSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "peripheralDevicePackagePosition"), ("PDU2-MIB", "unitSensorLowerCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorStateChangeDelay"), ("PDU2-MIB", "pduRatedVoltage"), ("PDU2-MIB", "inletSensorUnits"), ("PDU2-MIB", "overCurrentProtectorName"), ("PDU2-MIB", "outletNonCritical"), ("PDU2-MIB", "externalSensorType"), ("PDU2-MIB", "outletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "pduModel"), ("PDU2-MIB", "unitSensorSignedLowerWarningThreshold"), ("PDU2-MIB", "outletSensorSignedMaximum"), ("PDU2-MIB", "unitSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "overCurrentProtectorLabel"), ("PDU2-MIB", "outletPoleSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchFrontPanelManualTransferButtonEnabled"), ("PDU2-MIB", "transferSwitchCapabilities"), ("PDU2-MIB", "unitSensorEnabledThresholds"), ("PDU2-MIB", "inletSensorDecimalDigits"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMinimum"), ("PDU2-MIB", "inletControllerCount"), ("PDU2-MIB", "externalSensorUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchAutoReTransferRequiresPhaseSync"), ("PDU2-MIB", "peripheralDevicePackageState"), ("PDU2-MIB", "inletSensorSignedMinimum"), ("PDU2-MIB", "pduDaisychainMemberType"), ("PDU2-MIB", "transferSwitchAutoReTransferEnabled"), ("PDU2-MIB", "unitSensorUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorHysteresis"), ("PDU2-MIB", "outletSensorDecimalDigits"), ("PDU2-MIB", "pxMACAddress"), ("PDU2-MIB", "overCurrentProtectorSensorSignedMaximum"), ("PDU2-MIB", "externalSensorUpperWarningThreshold"), ("PDU2-MIB", "inletSensorUpperWarningThreshold"), ("PDU2-MIB", "outletRatedCurrent"), ("PDU2-MIB", "outletSwitchable"), ("PDU2-MIB", "externalSensorName"), ("PDU2-MIB", "inletSensorStateChangeDelay"), ("PDU2-MIB", "unitSensorResolution"), ("PDU2-MIB", "outletSensorUpperWarningThreshold"), ("PDU2-MIB", "inletPlugDescriptor"), ("PDU2-MIB", "inletPoleSensorSignedMaximum"), ("PDU2-MIB", "externalSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletPowerupSequence"), ("PDU2-MIB", "inletRatedVA"), ("PDU2-MIB", "synchronizeWithNTPServer"), ("PDU2-MIB", "unitSensorMaximum"), ("PDU2-MIB", "pduImage"), ("PDU2-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("PDU2-MIB", "serverCount"), ("PDU2-MIB", "transferSwitchSensorSignedMinimum"), ("PDU2-MIB", "overCurrentProtectorPowerSource"), ("PDU2-MIB", "externalSensorUnits"), ("PDU2-MIB", "inletPoleSensorSignedMinimum"), ("PDU2-MIB", "productType"), ("PDU2-MIB", "inletRCMResidualOperatingCurrent"), ("PDU2-MIB", "transferSwitchSensorLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleSensorSignedMaximum"), ("PDU2-MIB", "outletPoleSensorSignedMinimum"), ("PDU2-MIB", "outletPoleSensorStateChangeDelay"), ("PDU2-MIB", "overCurrentProtectorSensorMaximum"), ("PDU2-MIB", "transferSwitchSensorEnabledThresholds"), ("PDU2-MIB", "transferSwitchSensorMaximum"), ("PDU2-MIB", "outletPoleSensorLowerWarningThreshold"), ("PDU2-MIB", "outletPoleSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "externalSensorMinimum"), ("PDU2-MIB", "inletSensorSignedUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "inletEnableState"), ("PDU2-MIB", "useDHCPProvidedNTPServer"), ("PDU2-MIB", "inletPoleSensorLogAvailable"), ("PDU2-MIB", "transferSwitchSensorUnits"), ("PDU2-MIB", "pduCount"), ("PDU2-MIB", "outletStateOnStartup"), ("PDU2-MIB", "pduPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "outletCount"), ("PDU2-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("PDU2-MIB", "inletSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorType"), ("PDU2-MIB", "externalSensorDescription"), ("PDU2-MIB", "pduName"), ("PDU2-MIB", "unitSensorLowerWarningThreshold"), ("PDU2-MIB", "transferSwitchPreferredInlet"), ("PDU2-MIB", "externalSensorZCoordinate"), ("PDU2-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("PDU2-MIB", "relayBehaviorOnPowerLoss"), ("PDU2-MIB", "frontPanelActuatorControl"), ("PDU2-MIB", "unitSensorSignedMinimum"), ("PDU2-MIB", "unitSensorSignedUpperWarningThreshold"), ("PDU2-MIB", "inletSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "transferSwitchSensorLowerWarningThreshold"), ("PDU2-MIB", "inletRatedCurrent"), ("PDU2-MIB", "serverIPAddress"), ("PDU2-MIB", "outletPoleSensorUpperCriticalThreshold"), ("PDU2-MIB", "inletPoleSensorUnits"), ("PDU2-MIB", "inletSensorUpperCriticalThreshold"), ("PDU2-MIB", "outletSensorLowerWarningThreshold"), ("PDU2-MIB", "outletSequenceDelay"), ("PDU2-MIB", "overCurrentProtectorCapabilities"), ("PDU2-MIB", "inletSensorMinimum"), ("PDU2-MIB", "transferSwitchAutoReTransferWaitTime"), ("PDU2-MIB", "transferSwitchPowerSource2"), ("PDU2-MIB", "outletReceptacle"), ("PDU2-MIB", "loadShedding"), ("PDU2-MIB", "externalSensorPosition"), ("PDU2-MIB", "outletSensorSignedMinimum"), ("PDU2-MIB", "pduRatedCurrent"), ("PDU2-MIB", "overCurrentProtectorSensorSignedLowerCriticalThreshold"), ("PDU2-MIB", "externalSensorIsActuator"), ("PDU2-MIB", "overCurrentProtectorSensorLogAvailable"), ("PDU2-MIB", "overCurrentProtectorSensorUnits"), ("PDU2-MIB", "externalSensorsZCoordinateUnits"), ("PDU2-MIB", "unitSensorHysteresis"), ("PDU2-MIB", "outletRatedVoltage"), ("PDU2-MIB", "pduRatedFrequency"), ("PDU2-MIB", "outletLabel"), ("PDU2-MIB", "overCurrentProtectorSensorDecimalDigits"), ("PDU2-MIB", "utcOffset"), ("PDU2-MIB", "inletPoleSensorResolution"), ("PDU2-MIB", "outletPowerCyclingPowerOffPeriod"), ("PDU2-MIB", "externalSensorDecimalDigits"), ("PDU2-MIB", "inletPoleSensorUpperWarningThreshold"), ("PDU2-MIB", "transferSwitchPowerSource1"), ("PDU2-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("PDU2-MIB", "outletPoleCount"), ("PDU2-MIB", "inletSensorLowerCriticalThreshold"), ) )
if mibBuilder.loadTexts: configGroup.setDescription("A collection of objects representing configuration data.")
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 2)).setObjects(*(("PDU2-MIB", "logInletPoleSensorMaxValue"), ("PDU2-MIB", "logInletPoleSensorAvgValue"), ("PDU2-MIB", "logExternalSensorMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMaxValue"), ("PDU2-MIB", "logInletPoleSensorDataAvailable"), ("PDU2-MIB", "logUnitSensorDataAvailable"), ("PDU2-MIB", "logOutletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMinValue"), ("PDU2-MIB", "logInletSensorDataAvailable"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedAvgValue"), ("PDU2-MIB", "logUnitSensorMaxValue"), ("PDU2-MIB", "logOutletSensorSignedMaxValue"), ("PDU2-MIB", "oldestLogID"), ("PDU2-MIB", "logExternalSensorMinValue"), ("PDU2-MIB", "logUnitSensorState"), ("PDU2-MIB", "logOutletPoleSensorState"), ("PDU2-MIB", "logOutletSensorAvgValue"), ("PDU2-MIB", "logInletSensorSignedMaxValue"), ("PDU2-MIB", "dataLogging"), ("PDU2-MIB", "logOutletSensorSignedMinValue"), ("PDU2-MIB", "logUnitSensorAvgValue"), ("PDU2-MIB", "logOutletPoleSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorDataAvailable"), ("PDU2-MIB", "logInletPoleSensorSignedAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorState"), ("PDU2-MIB", "logExternalSensorDataAvailable"), ("PDU2-MIB", "logInletSensorMinValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedMinValue"), ("PDU2-MIB", "logInletSensorSignedMinValue"), ("PDU2-MIB", "logUnitSensorSignedMaxValue"), ("PDU2-MIB", "logInletSensorAvgValue"), ("PDU2-MIB", "logInletSensorSignedAvgValue"), ("PDU2-MIB", "logOutletSensorMinValue"), ("PDU2-MIB", "logInletPoleSensorSignedMinValue"), ("PDU2-MIB", "logInletPoleSensorState"), ("PDU2-MIB", "logTransferSwitchSensorAvgValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorAvgValue"), ("PDU2-MIB", "logInletSensorState"), ("PDU2-MIB", "logTransferSwitchSensorState"), ("PDU2-MIB", "logTimeStamp"), ("PDU2-MIB", "logExternalSensorAvgValue"), ("PDU2-MIB", "logExternalSensorState"), ("PDU2-MIB", "logOutletSensorState"), ("PDU2-MIB", "logOutletSensorMaxValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorDataAvailable"), ("PDU2-MIB", "logUnitSensorSignedAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorSignedAvgValue"), ("PDU2-MIB", "logUnitSensorMinValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorDataAvailable"), ("PDU2-MIB", "logOverCurrentProtectorSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorSignedMinValue"), ("PDU2-MIB", "logOverCurrentProtectorSensorMinValue"), ("PDU2-MIB", "logOutletSensorDataAvailable"), ("PDU2-MIB", "logTransferSwitchSensorSignedMaxValue"), ("PDU2-MIB", "logInletPoleSensorMinValue"), ("PDU2-MIB", "logUnitSensorSignedMinValue"), ("PDU2-MIB", "logOutletPoleSensorMaxValue"), ("PDU2-MIB", "newestLogID"), ("PDU2-MIB", "logOutletSensorSignedAvgValue"), ("PDU2-MIB", "dataLoggingEnableForAllSensors"), ("PDU2-MIB", "logTransferSwitchSensorMinValue"), ("PDU2-MIB", "logInletPoleSensorSignedMaxValue"), ("PDU2-MIB", "logOutletPoleSensorAvgValue"), ("PDU2-MIB", "logTransferSwitchSensorMaxValue"), ("PDU2-MIB", "logInletSensorMaxValue"), ) )
if mibBuilder.loadTexts: logGroup.setDescription("A collection of objects providing logging (history of readings) capabilities \nabout the PDU.")
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 3)).setObjects(*(("PDU2-MIB", "measurementsInletSensorSignedValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorIsAvailable"), ("PDU2-MIB", "measurementsInletSensorState"), ("PDU2-MIB", "measurementsUnitSensorSignedValue"), ("PDU2-MIB", "measurementsUnitSensorState"), ("PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsExternalSensorIsAvailable"), ("PDU2-MIB", "measurementsTransferSwitchSensorState"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletSensorValue"), ("PDU2-MIB", "measurementsOutletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsInletPoleSensorValue"), ("PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("PDU2-MIB", "measurementsExternalSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorIsAvailable"), ("PDU2-MIB", "measurementsInletSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("PDU2-MIB", "measurementsOutletSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorState"), ("PDU2-MIB", "measurementsInletSensorTimeStamp"), ("PDU2-MIB", "measurementsInletPoleSensorIsAvailable"), ("PDU2-MIB", "measurementsOutletSensorSignedValue"), ("PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("PDU2-MIB", "measurementsExternalSensorState"), ("PDU2-MIB", "measurementsOutletPoleSensorValue"), ("PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("PDU2-MIB", "measurementsInletPoleSensorState"), ("PDU2-MIB", "measurementsUnitSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("PDU2-MIB", "measurementsInletSensorValue"), ("PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ) )
if mibBuilder.loadTexts: measurementsGroup.setDescription("A collection of objects providing measurements (most recent data) capabilities.\nabout the PDU.")
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 4)).setObjects(*(("PDU2-MIB", "outletSwitchingTimeStamp"), ("PDU2-MIB", "rcmState"), ("PDU2-MIB", "transferSwitchAlarmOverride"), ("PDU2-MIB", "outletSensorResetValue"), ("PDU2-MIB", "inletSensorResetValue"), ("PDU2-MIB", "outletSwitchingState"), ("PDU2-MIB", "actuatorState"), ("PDU2-MIB", "switchingOperation"), ("PDU2-MIB", "transferSwitchActiveInlet"), ("PDU2-MIB", "unitSensorResetValue"), ("PDU2-MIB", "transferSwitchTransferToInlet"), ("PDU2-MIB", "transferSwitchLastTransferReason"), ) )
if mibBuilder.loadTexts: controlGroup.setDescription("A collection of objects providing the ability to control various components\nof a PDU.")
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 5)).setObjects(*(("PDU2-MIB", "userName"), ("PDU2-MIB", "changedParameterNewValue"), ("PDU2-MIB", "webcamConnectionPort"), ("PDU2-MIB", "typeOfSensor"), ("PDU2-MIB", "pduNumber"), ("PDU2-MIB", "targetUser"), ("PDU2-MIB", "agentInetPortNumber"), ("PDU2-MIB", "oldSensorState"), ("PDU2-MIB", "peripheralDeviceRomcode"), ("PDU2-MIB", "externalSensorNumber"), ("PDU2-MIB", "lhxSupportEnabled"), ("PDU2-MIB", "smtpMessageRecipients"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("PDU2-MIB", "roleName"), ("PDU2-MIB", "errorDescription"), ("PDU2-MIB", "imageVersion"), ("PDU2-MIB", "inletPoleNumber"), ("PDU2-MIB", "smtpServer"), ("PDU2-MIB", "webcamModel"), ("PDU2-MIB", "outletPoleNumber"), ("PDU2-MIB", "deviceChangedParameter"), ) )
if mibBuilder.loadTexts: trapInformationGroup.setDescription("A collection of objects providing information in the traps.")
trapsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 9)).setObjects(*(("PDU2-MIB", "rfCodeTagConnected"), ("PDU2-MIB", "userPasswordChanged"), ("PDU2-MIB", "transferSwitchSensorStateChange"), ("PDU2-MIB", "userAuthenticationFailure"), ("PDU2-MIB", "systemReset"), ("PDU2-MIB", "externalSensorStateChange"), ("PDU2-MIB", "serverReachable"), ("PDU2-MIB", "passwordSettingsChanged"), ("PDU2-MIB", "deviceUpdateFailed"), ("PDU2-MIB", "lhxSupportChanged"), ("PDU2-MIB", "serverNotReachable"), ("PDU2-MIB", "userBlocked"), ("PDU2-MIB", "overCurrentProtectorSensorStateChange"), ("PDU2-MIB", "userLogin"), ("PDU2-MIB", "userModified"), ("PDU2-MIB", "powerControl"), ("PDU2-MIB", "roleAdded"), ("PDU2-MIB", "peripheralDeviceFirmwareUpdate"), ("PDU2-MIB", "outletSensorReset"), ("PDU2-MIB", "inletDisabled"), ("PDU2-MIB", "deviceSettingsRestored"), ("PDU2-MIB", "smtpMessageTransmissionFailure"), ("PDU2-MIB", "userLogout"), ("PDU2-MIB", "usbSlaveDisconnected"), ("PDU2-MIB", "userSessionTimeout"), ("PDU2-MIB", "inletSensorStateChange"), ("PDU2-MIB", "firmwareValidationFailed"), ("PDU2-MIB", "pingServerEnabled"), ("PDU2-MIB", "inletPoleSensorStateChange"), ("PDU2-MIB", "deviceUpdateStarted"), ("PDU2-MIB", "userAcceptedRestrictedServiceAgreement"), ("PDU2-MIB", "webcamInserted"), ("PDU2-MIB", "logFileCleared"), ("PDU2-MIB", "unitSensorStateChange"), ("PDU2-MIB", "pingServerDisabled"), ("PDU2-MIB", "webcamRemoved"), ("PDU2-MIB", "outletSensorStateChange"), ("PDU2-MIB", "bulkConfigurationCopied"), ("PDU2-MIB", "radiusError"), ("PDU2-MIB", "deviceSettingsSaved"), ("PDU2-MIB", "inletEnabled"), ("PDU2-MIB", "outletPoleSensorStateChange"), ("PDU2-MIB", "bulkConfigurationSaved"), ("PDU2-MIB", "userAdded"), ("PDU2-MIB", "loadSheddingModeExited"), ("PDU2-MIB", "serverReachabilityError"), ("PDU2-MIB", "inletSensorReset"), ("PDU2-MIB", "userDeleted"), ("PDU2-MIB", "unitSensorReset"), ("PDU2-MIB", "roleDeleted"), ("PDU2-MIB", "rfCodeTagDisconnected"), ("PDU2-MIB", "loadSheddingModeEntered"), ("PDU2-MIB", "usbSlaveConnected"), ("PDU2-MIB", "unknownPeripheralDeviceAttached"), ("PDU2-MIB", "deviceIdentificationChanged"), ("PDU2-MIB", "deviceUpdateCompleted"), ("PDU2-MIB", "ldapError"), ("PDU2-MIB", "roleModified"), ("PDU2-MIB", "systemStarted"), ("PDU2-MIB", "serverConnectivityUnrecoverable"), ("PDU2-MIB", "userDeclinedRestrictedServiceAgreement"), ) )
if mibBuilder.loadTexts: trapsGroup.setDescription("A collection of traps.")
reliabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 10)).setObjects(*(("PDU2-MIB", "reliabilityErrorLogTime"), ("PDU2-MIB", "reliabilityErrorLogThreshold"), ("PDU2-MIB", "reliabilityDataMaxPossible"), ("PDU2-MIB", "reliabilityDataRawLowerBytes"), ("PDU2-MIB", "reliabilityErrorLogPOH"), ("PDU2-MIB", "reliabilityErrorLogRawLowerBytes"), ("PDU2-MIB", "reliabilityId"), ("PDU2-MIB", "reliabilityErrorLogValue"), ("PDU2-MIB", "reliabilityDataTableSequenceNumber"), ("PDU2-MIB", "reliabilityDataValue"), ("PDU2-MIB", "reliabilityDataFlags"), ("PDU2-MIB", "reliabilityErrorLogId"), ("PDU2-MIB", "reliabilityDataThreshold"), ("PDU2-MIB", "reliabilityDataWorstValue"), ("PDU2-MIB", "reliabilityErrorLogRawUpperBytes"), ("PDU2-MIB", "reliabilityDataRawUpperBytes"), ) )
if mibBuilder.loadTexts: reliabilityGroup.setDescription("A collection of objects providing reliability data.")
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 12)).setObjects(*(("PDU2-MIB", "netmask"), ("PDU2-MIB", "pxInetGateway"), ("PDU2-MIB", "pxIPAddress"), ("PDU2-MIB", "pxInetIPAddress"), ("PDU2-MIB", "pxInetNetmask"), ("PDU2-MIB", "pxInetAddressType"), ("PDU2-MIB", "gateway"), ) )
if mibBuilder.loadTexts: ipAddressGroup.setDescription("A collection of objects representing configuration data.")
oldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 13)).setObjects(*(("PDU2-MIB", "externalSensorTolerance"), ("PDU2-MIB", "wireSensorTolerance"), ("PDU2-MIB", "outletSequencingDelay"), ("PDU2-MIB", "overCurrentProtectorSensorAccuracy"), ("PDU2-MIB", "wireSensorDecimalDigits"), ("PDU2-MIB", "outletPoleSensorTolerance"), ("PDU2-MIB", "unitSensorTolerance"), ("PDU2-MIB", "wireSensorUpperCriticalThreshold"), ("PDU2-MIB", "wireSensorHysteresis"), ("PDU2-MIB", "wireSensorMinimum"), ("PDU2-MIB", "wireLabel"), ("PDU2-MIB", "transferSwitchSensorAccuracy"), ("PDU2-MIB", "wireSensorLowerWarningThreshold"), ("PDU2-MIB", "wireSensorEnabledThresholds"), ("PDU2-MIB", "unitSensorAccuracy"), ("PDU2-MIB", "wireSensorResolution"), ("PDU2-MIB", "outletPoleSensorAccuracy"), ("PDU2-MIB", "inletPoleSensorTolerance"), ("PDU2-MIB", "inletSensorAccuracy"), ("PDU2-MIB", "wireSensorUnits"), ("PDU2-MIB", "wirePowerSource"), ("PDU2-MIB", "externalSensorAccuracy"), ("PDU2-MIB", "outletSensorTolerance"), ("PDU2-MIB", "wireSensorUpperWarningThreshold"), ("PDU2-MIB", "overCurrentProtectorSensorTolerance"), ("PDU2-MIB", "wireSensorAccuracy"), ("PDU2-MIB", "transferSwitchSensorTolerance"), ("PDU2-MIB", "wireSensorLogAvailable"), ("PDU2-MIB", "wireSensorStateChangeDelay"), ("PDU2-MIB", "wireSensorLowerCriticalThreshold"), ("PDU2-MIB", "wireCount"), ("PDU2-MIB", "wireSensorMaximum"), ("PDU2-MIB", "inletPoleSensorAccuracy"), ("PDU2-MIB", "wireCapabilities"), ("PDU2-MIB", "outletSensorAccuracy"), ("PDU2-MIB", "inletSensorTolerance"), ) )
if mibBuilder.loadTexts: oldConfigGroup.setDescription("A collection of objects representing old (deprecated) configuration data.")
oldLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 14)).setObjects(*(("PDU2-MIB", "logWireSensorAvgValue"), ("PDU2-MIB", "logWireSensorMaxValue"), ("PDU2-MIB", "logWireSensorState"), ("PDU2-MIB", "logWireSensorMinValue"), ("PDU2-MIB", "logWireSensorDataAvailable"), ) )
if mibBuilder.loadTexts: oldLogGroup.setDescription("A collection of objects representing old (deprecated) logging data.")
oldMeasurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 15)).setObjects(*(("PDU2-MIB", "measurementsWireSensorIsAvailable"), ("PDU2-MIB", "measurementsWireSensorState"), ("PDU2-MIB", "measurementsWireSensorValue"), ("PDU2-MIB", "measurementsWireSensorTimeStamp"), ) )
if mibBuilder.loadTexts: oldMeasurementsGroup.setDescription("A collection of objects representing old (deprecated) measurement data.")
oldTrapsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 16)).setObjects(*(("PDU2-MIB", "wireSensorStateChange"), ("PDU2-MIB", "pduSensorStateChange"), ) )
if mibBuilder.loadTexts: oldTrapsGroup.setDescription("A collection of objects representing old (deprecated) traps.")

# Compliances

complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 1)).setObjects(*(("PDU2-MIB", "oldConfigGroup"), ("PDU2-MIB", "oldLogGroup"), ("PDU2-MIB", "ipAddressGroup"), ("PDU2-MIB", "oldMeasurementsGroup"), ("PDU2-MIB", "oldTrapsGroup"), ) )
if mibBuilder.loadTexts: complianceRev1.setDescription("The requirements for conformance to the PDU2-MIB.")
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 2)).setObjects(*(("PDU2-MIB", "configGroup"), ("PDU2-MIB", "controlGroup"), ("PDU2-MIB", "reliabilityGroup"), ("PDU2-MIB", "trapsGroup"), ("PDU2-MIB", "trapInformationGroup"), ("PDU2-MIB", "measurementsGroup"), ("PDU2-MIB", "logGroup"), ) )
if mibBuilder.loadTexts: complianceRev2.setDescription("The requirements for conformance to the PDU2-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("PDU2-MIB", PYSNMP_MODULE_ID=raritan)

# Types
mibBuilder.exportSymbols("PDU2-MIB", BoardTypeEnumeration=BoardTypeEnumeration, DaisychainMemberTypeEnumeration=DaisychainMemberTypeEnumeration, DeviceCascadeTypeEnumeration=DeviceCascadeTypeEnumeration, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, GlobalOutletStateOnStartupEnumeration=GlobalOutletStateOnStartupEnumeration, HundredthsOfAPercentage=HundredthsOfAPercentage, OutletStateOnStartupEnumeration=OutletStateOnStartupEnumeration, OutletSwitchingOperationsEnumeration=OutletSwitchingOperationsEnumeration, OverCurrentProtectorTypeEnumeration=OverCurrentProtectorTypeEnumeration, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, PlugTypeEnumeration=PlugTypeEnumeration, ProductTypeEnumeration=ProductTypeEnumeration, ReceptacleTypeEnumeration=ReceptacleTypeEnumeration, RelayPowerLossBehaviorEnumeration=RelayPowerLossBehaviorEnumeration, SensorStateEnumeration=SensorStateEnumeration, SensorTypeEnumeration=SensorTypeEnumeration, SensorUnitsEnumeration=SensorUnitsEnumeration, TransferSwitchTransferReasonEnumeration=TransferSwitchTransferReasonEnumeration, URL=URL)

# Objects
mibBuilder.exportSymbols("PDU2-MIB", raritan=raritan, pdu2=pdu2, traps=traps, trapInformation=trapInformation, trapInformationTable=trapInformationTable, trapInformationEntry=trapInformationEntry, userName=userName, targetUser=targetUser, imageVersion=imageVersion, roleName=roleName, smtpMessageRecipients=smtpMessageRecipients, smtpServer=smtpServer, oldSensorState=oldSensorState, pduNumber=pduNumber, inletPoleNumber=inletPoleNumber, outletPoleNumber=outletPoleNumber, externalSensorNumber=externalSensorNumber, typeOfSensor=typeOfSensor, errorDescription=errorDescription, deviceChangedParameter=deviceChangedParameter, changedParameterNewValue=changedParameterNewValue, lhxSupportEnabled=lhxSupportEnabled, webcamModel=webcamModel, webcamConnectionPort=webcamConnectionPort, agentInetPortNumber=agentInetPortNumber, peripheralDeviceRomcode=peripheralDeviceRomcode, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, board=board, environmental=environmental, configuration=configuration, pduCount=pduCount, unit=unit, nameplateTable=nameplateTable, nameplateEntry=nameplateEntry, pduId=pduId, pduManufacturer=pduManufacturer, pduModel=pduModel, pduSerialNumber=pduSerialNumber, pduRatedVoltage=pduRatedVoltage, pduRatedCurrent=pduRatedCurrent, pduRatedFrequency=pduRatedFrequency, pduRatedVA=pduRatedVA, pduImage=pduImage, unitConfigurationTable=unitConfigurationTable, unitConfigurationEntry=unitConfigurationEntry, inletCount=inletCount, overCurrentProtectorCount=overCurrentProtectorCount, outletCount=outletCount, inletControllerCount=inletControllerCount, outletControllerCount=outletControllerCount, externalSensorCount=externalSensorCount, pxIPAddress=pxIPAddress, netmask=netmask, gateway=gateway, pxMACAddress=pxMACAddress, utcOffset=utcOffset, pduName=pduName, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, unitDeviceCapabilities=unitDeviceCapabilities, outletSequencingDelay=outletSequencingDelay, globalOutletPowerCyclingPowerOffPeriod=globalOutletPowerCyclingPowerOffPeriod, globalOutletStateOnStartup=globalOutletStateOnStartup, outletPowerupSequence=outletPowerupSequence, pduPowerCyclingPowerOffPeriod=pduPowerCyclingPowerOffPeriod, pduDaisychainMemberType=pduDaisychainMemberType, managedExternalSensorCount=managedExternalSensorCount, pxInetAddressType=pxInetAddressType, pxInetIPAddress=pxInetIPAddress, pxInetNetmask=pxInetNetmask, pxInetGateway=pxInetGateway, loadShedding=loadShedding, serverCount=serverCount, inrushGuardDelay=inrushGuardDelay, cascadedDeviceConnected=cascadedDeviceConnected, synchronizeWithNTPServer=synchronizeWithNTPServer, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, firstNTPServerAddressType=firstNTPServerAddressType, firstNTPServerAddress=firstNTPServerAddress, secondNTPServerAddressType=secondNTPServerAddressType, secondNTPServerAddress=secondNTPServerAddress, wireCount=wireCount, transferSwitchCount=transferSwitchCount, productType=productType, meteringControllerCount=meteringControllerCount, relayBehaviorOnPowerLoss=relayBehaviorOnPowerLoss, deviceCascadeType=deviceCascadeType, deviceCascadePosition=deviceCascadePosition, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, frontPanelOutletSwitching=frontPanelOutletSwitching, frontPanelRCMSelfTest=frontPanelRCMSelfTest, frontPanelActuatorControl=frontPanelActuatorControl, controllerConfigurationTable=controllerConfigurationTable, controllerConfigurationEntry=controllerConfigurationEntry, boardType=boardType, boardIndex=boardIndex, boardVersion=boardVersion, boardFirmwareVersion=boardFirmwareVersion, boardFirmwareTimeStamp=boardFirmwareTimeStamp, logConfigurationTable=logConfigurationTable, logConfigurationEntry=logConfigurationEntry, dataLogging=dataLogging, measurementPeriod=measurementPeriod, measurementsPerLogEntry=measurementsPerLogEntry, logSize=logSize, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, unitSensorConfigurationTable=unitSensorConfigurationTable, unitSensorConfigurationEntry=unitSensorConfigurationEntry, sensorType=sensorType, unitSensorLogAvailable=unitSensorLogAvailable, unitSensorUnits=unitSensorUnits, unitSensorDecimalDigits=unitSensorDecimalDigits, unitSensorAccuracy=unitSensorAccuracy, unitSensorResolution=unitSensorResolution, unitSensorTolerance=unitSensorTolerance, unitSensorMaximum=unitSensorMaximum, unitSensorMinimum=unitSensorMinimum, unitSensorHysteresis=unitSensorHysteresis, unitSensorStateChangeDelay=unitSensorStateChangeDelay, unitSensorLowerCriticalThreshold=unitSensorLowerCriticalThreshold, unitSensorLowerWarningThreshold=unitSensorLowerWarningThreshold, unitSensorUpperCriticalThreshold=unitSensorUpperCriticalThreshold, unitSensorUpperWarningThreshold=unitSensorUpperWarningThreshold, unitSensorEnabledThresholds=unitSensorEnabledThresholds, unitSensorSignedMaximum=unitSensorSignedMaximum, unitSensorSignedMinimum=unitSensorSignedMinimum, unitSensorSignedLowerCriticalThreshold=unitSensorSignedLowerCriticalThreshold)
mibBuilder.exportSymbols("PDU2-MIB", unitSensorSignedLowerWarningThreshold=unitSensorSignedLowerWarningThreshold, unitSensorSignedUpperCriticalThreshold=unitSensorSignedUpperCriticalThreshold, unitSensorSignedUpperWarningThreshold=unitSensorSignedUpperWarningThreshold, inlets=inlets, inletConfigurationTable=inletConfigurationTable, inletConfigurationEntry=inletConfigurationEntry, inletId=inletId, inletLabel=inletLabel, inletName=inletName, inletPlug=inletPlug, inletPoleCount=inletPoleCount, inletRatedVoltage=inletRatedVoltage, inletRatedCurrent=inletRatedCurrent, inletRatedFrequency=inletRatedFrequency, inletRatedVA=inletRatedVA, inletDeviceCapabilities=inletDeviceCapabilities, inletPoleCapabilities=inletPoleCapabilities, inletPlugDescriptor=inletPlugDescriptor, inletEnableState=inletEnableState, inletRCMResidualOperatingCurrent=inletRCMResidualOperatingCurrent, inletSensorConfigurationTable=inletSensorConfigurationTable, inletSensorConfigurationEntry=inletSensorConfigurationEntry, inletSensorLogAvailable=inletSensorLogAvailable, inletSensorUnits=inletSensorUnits, inletSensorDecimalDigits=inletSensorDecimalDigits, inletSensorAccuracy=inletSensorAccuracy, inletSensorResolution=inletSensorResolution, inletSensorTolerance=inletSensorTolerance, inletSensorMaximum=inletSensorMaximum, inletSensorMinimum=inletSensorMinimum, inletSensorHysteresis=inletSensorHysteresis, inletSensorStateChangeDelay=inletSensorStateChangeDelay, inletSensorLowerCriticalThreshold=inletSensorLowerCriticalThreshold, inletSensorLowerWarningThreshold=inletSensorLowerWarningThreshold, inletSensorUpperCriticalThreshold=inletSensorUpperCriticalThreshold, inletSensorUpperWarningThreshold=inletSensorUpperWarningThreshold, inletSensorEnabledThresholds=inletSensorEnabledThresholds, inletSensorSignedMaximum=inletSensorSignedMaximum, inletSensorSignedMinimum=inletSensorSignedMinimum, inletSensorSignedLowerCriticalThreshold=inletSensorSignedLowerCriticalThreshold, inletSensorSignedLowerWarningThreshold=inletSensorSignedLowerWarningThreshold, inletSensorSignedUpperCriticalThreshold=inletSensorSignedUpperCriticalThreshold, inletSensorSignedUpperWarningThreshold=inletSensorSignedUpperWarningThreshold, inletPoleSensorConfigurationTable=inletPoleSensorConfigurationTable, inletPoleSensorConfigurationEntry=inletPoleSensorConfigurationEntry, inletPoleIndex=inletPoleIndex, inletPoleSensorLogAvailable=inletPoleSensorLogAvailable, inletPoleSensorUnits=inletPoleSensorUnits, inletPoleSensorDecimalDigits=inletPoleSensorDecimalDigits, inletPoleSensorAccuracy=inletPoleSensorAccuracy, inletPoleSensorResolution=inletPoleSensorResolution, inletPoleSensorTolerance=inletPoleSensorTolerance, inletPoleSensorMaximum=inletPoleSensorMaximum, inletPoleSensorMinimum=inletPoleSensorMinimum, inletPoleSensorHysteresis=inletPoleSensorHysteresis, inletPoleSensorStateChangeDelay=inletPoleSensorStateChangeDelay, inletPoleSensorLowerCriticalThreshold=inletPoleSensorLowerCriticalThreshold, inletPoleSensorLowerWarningThreshold=inletPoleSensorLowerWarningThreshold, inletPoleSensorUpperCriticalThreshold=inletPoleSensorUpperCriticalThreshold, inletPoleSensorUpperWarningThreshold=inletPoleSensorUpperWarningThreshold, inletPoleSensorEnabledThresholds=inletPoleSensorEnabledThresholds, inletPoleSensorSignedMaximum=inletPoleSensorSignedMaximum, inletPoleSensorSignedMinimum=inletPoleSensorSignedMinimum, inletPoleSensorSignedLowerCriticalThreshold=inletPoleSensorSignedLowerCriticalThreshold, inletPoleSensorSignedLowerWarningThreshold=inletPoleSensorSignedLowerWarningThreshold, inletPoleSensorSignedUpperCriticalThreshold=inletPoleSensorSignedUpperCriticalThreshold, inletPoleSensorSignedUpperWarningThreshold=inletPoleSensorSignedUpperWarningThreshold, overCurrentProtector=overCurrentProtector, overCurrentProtectorConfigurationTable=overCurrentProtectorConfigurationTable, overCurrentProtectorConfigurationEntry=overCurrentProtectorConfigurationEntry, overCurrentProtectorIndex=overCurrentProtectorIndex, overCurrentProtectorLabel=overCurrentProtectorLabel, overCurrentProtectorName=overCurrentProtectorName, overCurrentProtectorType=overCurrentProtectorType, overCurrentProtectorRatedCurrent=overCurrentProtectorRatedCurrent, overCurrentProtectorCapabilities=overCurrentProtectorCapabilities, overCurrentProtectorPowerSource=overCurrentProtectorPowerSource, overCurrentProtectorSensorConfigurationTable=overCurrentProtectorSensorConfigurationTable, overCurrentProtectorSensorConfigurationEntry=overCurrentProtectorSensorConfigurationEntry, overCurrentProtectorSensorLogAvailable=overCurrentProtectorSensorLogAvailable, overCurrentProtectorSensorUnits=overCurrentProtectorSensorUnits, overCurrentProtectorSensorDecimalDigits=overCurrentProtectorSensorDecimalDigits, overCurrentProtectorSensorAccuracy=overCurrentProtectorSensorAccuracy, overCurrentProtectorSensorResolution=overCurrentProtectorSensorResolution, overCurrentProtectorSensorTolerance=overCurrentProtectorSensorTolerance, overCurrentProtectorSensorMaximum=overCurrentProtectorSensorMaximum, overCurrentProtectorSensorMinimum=overCurrentProtectorSensorMinimum, overCurrentProtectorSensorHysteresis=overCurrentProtectorSensorHysteresis, overCurrentProtectorSensorStateChangeDelay=overCurrentProtectorSensorStateChangeDelay, overCurrentProtectorSensorLowerCriticalThreshold=overCurrentProtectorSensorLowerCriticalThreshold, overCurrentProtectorSensorLowerWarningThreshold=overCurrentProtectorSensorLowerWarningThreshold, overCurrentProtectorSensorUpperCriticalThreshold=overCurrentProtectorSensorUpperCriticalThreshold, overCurrentProtectorSensorUpperWarningThreshold=overCurrentProtectorSensorUpperWarningThreshold, overCurrentProtectorSensorEnabledThresholds=overCurrentProtectorSensorEnabledThresholds, overCurrentProtectorSensorSignedMaximum=overCurrentProtectorSensorSignedMaximum, overCurrentProtectorSensorSignedMinimum=overCurrentProtectorSensorSignedMinimum, overCurrentProtectorSensorSignedLowerCriticalThreshold=overCurrentProtectorSensorSignedLowerCriticalThreshold, overCurrentProtectorSensorSignedLowerWarningThreshold=overCurrentProtectorSensorSignedLowerWarningThreshold, overCurrentProtectorSensorSignedUpperCriticalThreshold=overCurrentProtectorSensorSignedUpperCriticalThreshold, overCurrentProtectorSensorSignedUpperWarningThreshold=overCurrentProtectorSensorSignedUpperWarningThreshold, outlets=outlets, outletConfigurationTable=outletConfigurationTable, outletConfigurationEntry=outletConfigurationEntry, outletId=outletId, outletLabel=outletLabel, outletName=outletName, outletReceptacle=outletReceptacle, outletPoleCount=outletPoleCount, outletRatedVoltage=outletRatedVoltage, outletRatedCurrent=outletRatedCurrent, outletRatedVA=outletRatedVA, outletDeviceCapabilities=outletDeviceCapabilities, outletPoleCapabilities=outletPoleCapabilities, outletPowerCyclingPowerOffPeriod=outletPowerCyclingPowerOffPeriod, outletStateOnStartup=outletStateOnStartup, outletUseGlobalPowerCyclingPowerOffPeriod=outletUseGlobalPowerCyclingPowerOffPeriod, outletSwitchable=outletSwitchable, outletReceptacleDescriptor=outletReceptacleDescriptor, outletNonCritical=outletNonCritical, outletSequenceDelay=outletSequenceDelay, outletPowerSource=outletPowerSource, outletSensorConfigurationTable=outletSensorConfigurationTable, outletSensorConfigurationEntry=outletSensorConfigurationEntry, outletSensorLogAvailable=outletSensorLogAvailable, outletSensorUnits=outletSensorUnits, outletSensorDecimalDigits=outletSensorDecimalDigits, outletSensorAccuracy=outletSensorAccuracy)
mibBuilder.exportSymbols("PDU2-MIB", outletSensorResolution=outletSensorResolution, outletSensorTolerance=outletSensorTolerance, outletSensorMaximum=outletSensorMaximum, outletSensorMinimum=outletSensorMinimum, outletSensorHysteresis=outletSensorHysteresis, outletSensorStateChangeDelay=outletSensorStateChangeDelay, outletSensorLowerCriticalThreshold=outletSensorLowerCriticalThreshold, outletSensorLowerWarningThreshold=outletSensorLowerWarningThreshold, outletSensorUpperCriticalThreshold=outletSensorUpperCriticalThreshold, outletSensorUpperWarningThreshold=outletSensorUpperWarningThreshold, outletSensorEnabledThresholds=outletSensorEnabledThresholds, outletSensorSignedMaximum=outletSensorSignedMaximum, outletSensorSignedMinimum=outletSensorSignedMinimum, outletSensorSignedLowerCriticalThreshold=outletSensorSignedLowerCriticalThreshold, outletSensorSignedLowerWarningThreshold=outletSensorSignedLowerWarningThreshold, outletSensorSignedUpperCriticalThreshold=outletSensorSignedUpperCriticalThreshold, outletSensorSignedUpperWarningThreshold=outletSensorSignedUpperWarningThreshold, outletPoleSensorConfigurationTable=outletPoleSensorConfigurationTable, outletPoleSensorConfigurationEntry=outletPoleSensorConfigurationEntry, outletPoleIndex=outletPoleIndex, outletPoleSensorLogAvailable=outletPoleSensorLogAvailable, outletPoleSensorUnits=outletPoleSensorUnits, outletPoleSensorDecimalDigits=outletPoleSensorDecimalDigits, outletPoleSensorAccuracy=outletPoleSensorAccuracy, outletPoleSensorResolution=outletPoleSensorResolution, outletPoleSensorTolerance=outletPoleSensorTolerance, outletPoleSensorMaximum=outletPoleSensorMaximum, outletPoleSensorMinimum=outletPoleSensorMinimum, outletPoleSensorHysteresis=outletPoleSensorHysteresis, outletPoleSensorStateChangeDelay=outletPoleSensorStateChangeDelay, outletPoleSensorLowerCriticalThreshold=outletPoleSensorLowerCriticalThreshold, outletPoleSensorLowerWarningThreshold=outletPoleSensorLowerWarningThreshold, outletPoleSensorUpperCriticalThreshold=outletPoleSensorUpperCriticalThreshold, outletPoleSensorUpperWarningThreshold=outletPoleSensorUpperWarningThreshold, outletPoleSensorEnabledThresholds=outletPoleSensorEnabledThresholds, outletPoleSensorSignedMaximum=outletPoleSensorSignedMaximum, outletPoleSensorSignedMinimum=outletPoleSensorSignedMinimum, outletPoleSensorSignedLowerCriticalThreshold=outletPoleSensorSignedLowerCriticalThreshold, outletPoleSensorSignedLowerWarningThreshold=outletPoleSensorSignedLowerWarningThreshold, outletPoleSensorSignedUpperCriticalThreshold=outletPoleSensorSignedUpperCriticalThreshold, outletPoleSensorSignedUpperWarningThreshold=outletPoleSensorSignedUpperWarningThreshold, externalSensors=externalSensors, externalSensorConfigurationTable=externalSensorConfigurationTable, externalSensorConfigurationEntry=externalSensorConfigurationEntry, sensorID=sensorID, externalSensorType=externalSensorType, externalSensorSerialNumber=externalSensorSerialNumber, externalSensorName=externalSensorName, externalSensorDescription=externalSensorDescription, externalSensorXCoordinate=externalSensorXCoordinate, externalSensorYCoordinate=externalSensorYCoordinate, externalSensorZCoordinate=externalSensorZCoordinate, externalSensorChannelNumber=externalSensorChannelNumber, externalOnOffSensorSubtype=externalOnOffSensorSubtype, externalSensorLogAvailable=externalSensorLogAvailable, externalSensorUnits=externalSensorUnits, externalSensorDecimalDigits=externalSensorDecimalDigits, externalSensorAccuracy=externalSensorAccuracy, externalSensorResolution=externalSensorResolution, externalSensorTolerance=externalSensorTolerance, externalSensorMaximum=externalSensorMaximum, externalSensorMinimum=externalSensorMinimum, externalSensorHysteresis=externalSensorHysteresis, externalSensorStateChangeDelay=externalSensorStateChangeDelay, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, externalSensorEnabledThresholds=externalSensorEnabledThresholds, externalSensorIsActuator=externalSensorIsActuator, externalSensorPosition=externalSensorPosition, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, peripheralDevicePackageTable=peripheralDevicePackageTable, peripheralDevicePackageEntry=peripheralDevicePackageEntry, peripheralDevicePackageId=peripheralDevicePackageId, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, peripheralDevicePackageModel=peripheralDevicePackageModel, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, peripheralDevicePackagePosition=peripheralDevicePackagePosition, peripheralDevicePackageState=peripheralDevicePackageState, serverReachability=serverReachability, serverReachabilityTable=serverReachabilityTable, serverReachabilityEntry=serverReachabilityEntry, serverID=serverID, serverIPAddress=serverIPAddress, serverPingEnabled=serverPingEnabled, wires=wires, wireConfigurationTable=wireConfigurationTable, wireConfigurationEntry=wireConfigurationEntry, wireId=wireId, wireLabel=wireLabel, wireCapabilities=wireCapabilities, wirePowerSource=wirePowerSource, wireSensorConfigurationTable=wireSensorConfigurationTable, wireSensorConfigurationEntry=wireSensorConfigurationEntry, wireSensorLogAvailable=wireSensorLogAvailable, wireSensorUnits=wireSensorUnits, wireSensorDecimalDigits=wireSensorDecimalDigits, wireSensorAccuracy=wireSensorAccuracy, wireSensorResolution=wireSensorResolution, wireSensorTolerance=wireSensorTolerance, wireSensorMaximum=wireSensorMaximum, wireSensorMinimum=wireSensorMinimum, wireSensorHysteresis=wireSensorHysteresis, wireSensorStateChangeDelay=wireSensorStateChangeDelay, wireSensorLowerCriticalThreshold=wireSensorLowerCriticalThreshold, wireSensorLowerWarningThreshold=wireSensorLowerWarningThreshold, wireSensorUpperCriticalThreshold=wireSensorUpperCriticalThreshold, wireSensorUpperWarningThreshold=wireSensorUpperWarningThreshold, wireSensorEnabledThresholds=wireSensorEnabledThresholds, transferSwitch=transferSwitch, transferSwitchConfigurationTable=transferSwitchConfigurationTable, transferSwitchConfigurationEntry=transferSwitchConfigurationEntry, transferSwitchId=transferSwitchId, transferSwitchLabel=transferSwitchLabel)
mibBuilder.exportSymbols("PDU2-MIB", transferSwitchName=transferSwitchName, transferSwitchPreferredInlet=transferSwitchPreferredInlet, transferSwitchAutoReTransferEnabled=transferSwitchAutoReTransferEnabled, transferSwitchAutoReTransferWaitTime=transferSwitchAutoReTransferWaitTime, transferSwitchAutoReTransferRequiresPhaseSync=transferSwitchAutoReTransferRequiresPhaseSync, transferSwitchFrontPanelManualTransferButtonEnabled=transferSwitchFrontPanelManualTransferButtonEnabled, transferSwitchCapabilities=transferSwitchCapabilities, transferSwitchPowerSource1=transferSwitchPowerSource1, transferSwitchPowerSource2=transferSwitchPowerSource2, transferSwitchSensorConfigurationTable=transferSwitchSensorConfigurationTable, transferSwitchSensorConfigurationEntry=transferSwitchSensorConfigurationEntry, transferSwitchSensorLogAvailable=transferSwitchSensorLogAvailable, transferSwitchSensorUnits=transferSwitchSensorUnits, transferSwitchSensorDecimalDigits=transferSwitchSensorDecimalDigits, transferSwitchSensorAccuracy=transferSwitchSensorAccuracy, transferSwitchSensorResolution=transferSwitchSensorResolution, transferSwitchSensorTolerance=transferSwitchSensorTolerance, transferSwitchSensorMaximum=transferSwitchSensorMaximum, transferSwitchSensorMinimum=transferSwitchSensorMinimum, transferSwitchSensorHysteresis=transferSwitchSensorHysteresis, transferSwitchSensorStateChangeDelay=transferSwitchSensorStateChangeDelay, transferSwitchSensorLowerCriticalThreshold=transferSwitchSensorLowerCriticalThreshold, transferSwitchSensorLowerWarningThreshold=transferSwitchSensorLowerWarningThreshold, transferSwitchSensorUpperCriticalThreshold=transferSwitchSensorUpperCriticalThreshold, transferSwitchSensorUpperWarningThreshold=transferSwitchSensorUpperWarningThreshold, transferSwitchSensorEnabledThresholds=transferSwitchSensorEnabledThresholds, transferSwitchSensorSignedMaximum=transferSwitchSensorSignedMaximum, transferSwitchSensorSignedMinimum=transferSwitchSensorSignedMinimum, transferSwitchSensorSignedLowerCriticalThreshold=transferSwitchSensorSignedLowerCriticalThreshold, transferSwitchSensorSignedLowerWarningThreshold=transferSwitchSensorSignedLowerWarningThreshold, transferSwitchSensorSignedUpperCriticalThreshold=transferSwitchSensorSignedUpperCriticalThreshold, transferSwitchSensorSignedUpperWarningThreshold=transferSwitchSensorSignedUpperWarningThreshold, control=control, outletControl=outletControl, outletSwitchControlTable=outletSwitchControlTable, outletSwitchControlEntry=outletSwitchControlEntry, switchingOperation=switchingOperation, outletSwitchingState=outletSwitchingState, outletSwitchingTimeStamp=outletSwitchingTimeStamp, externalSensorControl=externalSensorControl, transferSwitchControl=transferSwitchControl, transferSwitchControlTable=transferSwitchControlTable, transferSwitchControlEntry=transferSwitchControlEntry, transferSwitchActiveInlet=transferSwitchActiveInlet, transferSwitchTransferToInlet=transferSwitchTransferToInlet, transferSwitchAlarmOverride=transferSwitchAlarmOverride, transferSwitchLastTransferReason=transferSwitchLastTransferReason, actuatorControl=actuatorControl, actuatorControlTable=actuatorControlTable, actuatorControlEntry=actuatorControlEntry, actuatorState=actuatorState, rcmControl=rcmControl, rcmSelfTestTable=rcmSelfTestTable, rcmSelfTestEntry=rcmSelfTestEntry, rcmState=rcmState, inletSensorControl=inletSensorControl, inletSensorControlTable=inletSensorControlTable, inletSensorControlEntry=inletSensorControlEntry, inletSensorResetValue=inletSensorResetValue, outletSensorControl=outletSensorControl, outletSensorControlTable=outletSensorControlTable, outletSensorControlEntry=outletSensorControlEntry, outletSensorResetValue=outletSensorResetValue, unitSensorControl=unitSensorControl, unitSensorControlTable=unitSensorControlTable, unitSensorControlEntry=unitSensorControlEntry, unitSensorResetValue=unitSensorResetValue, measurements=measurements, measurementsUnit=measurementsUnit, unitSensorMeasurementsTable=unitSensorMeasurementsTable, unitSensorMeasurementsEntry=unitSensorMeasurementsEntry, measurementsUnitSensorIsAvailable=measurementsUnitSensorIsAvailable, measurementsUnitSensorState=measurementsUnitSensorState, measurementsUnitSensorValue=measurementsUnitSensorValue, measurementsUnitSensorTimeStamp=measurementsUnitSensorTimeStamp, measurementsUnitSensorSignedValue=measurementsUnitSensorSignedValue, measurementsInlet=measurementsInlet, inletSensorMeasurementsTable=inletSensorMeasurementsTable, inletSensorMeasurementsEntry=inletSensorMeasurementsEntry, measurementsInletSensorIsAvailable=measurementsInletSensorIsAvailable, measurementsInletSensorState=measurementsInletSensorState, measurementsInletSensorValue=measurementsInletSensorValue, measurementsInletSensorTimeStamp=measurementsInletSensorTimeStamp, measurementsInletSensorSignedValue=measurementsInletSensorSignedValue, inletPoleSensorMeasurementsTable=inletPoleSensorMeasurementsTable, inletPoleSensorMeasurementsEntry=inletPoleSensorMeasurementsEntry, measurementsInletPoleSensorIsAvailable=measurementsInletPoleSensorIsAvailable, measurementsInletPoleSensorState=measurementsInletPoleSensorState, measurementsInletPoleSensorValue=measurementsInletPoleSensorValue, measurementsInletPoleSensorTimeStamp=measurementsInletPoleSensorTimeStamp, measurementsInletPoleSensorSignedValue=measurementsInletPoleSensorSignedValue, measurementsOverCurrentProtector=measurementsOverCurrentProtector, overCurrentProtectorSensorMeasurementsTable=overCurrentProtectorSensorMeasurementsTable, overCurrentProtectorSensorMeasurementsEntry=overCurrentProtectorSensorMeasurementsEntry, measurementsOverCurrentProtectorSensorIsAvailable=measurementsOverCurrentProtectorSensorIsAvailable, measurementsOverCurrentProtectorSensorState=measurementsOverCurrentProtectorSensorState, measurementsOverCurrentProtectorSensorValue=measurementsOverCurrentProtectorSensorValue, measurementsOverCurrentProtectorSensorTimeStamp=measurementsOverCurrentProtectorSensorTimeStamp, measurementsOverCurrentProtectorSensorSignedValue=measurementsOverCurrentProtectorSensorSignedValue, measurementsOutlet=measurementsOutlet, outletSensorMeasurementsTable=outletSensorMeasurementsTable, outletSensorMeasurementsEntry=outletSensorMeasurementsEntry, measurementsOutletSensorIsAvailable=measurementsOutletSensorIsAvailable, measurementsOutletSensorState=measurementsOutletSensorState, measurementsOutletSensorValue=measurementsOutletSensorValue, measurementsOutletSensorTimeStamp=measurementsOutletSensorTimeStamp, measurementsOutletSensorSignedValue=measurementsOutletSensorSignedValue, outletPoleSensorMeasurementsTable=outletPoleSensorMeasurementsTable, outletPoleSensorMeasurementsEntry=outletPoleSensorMeasurementsEntry, measurementsOutletPoleSensorIsAvailable=measurementsOutletPoleSensorIsAvailable, measurementsOutletPoleSensorState=measurementsOutletPoleSensorState, measurementsOutletPoleSensorValue=measurementsOutletPoleSensorValue, measurementsOutletPoleSensorTimeStamp=measurementsOutletPoleSensorTimeStamp, measurementsOutletPoleSensorSignedValue=measurementsOutletPoleSensorSignedValue, measurementsExternalSensor=measurementsExternalSensor, externalSensorMeasurementsTable=externalSensorMeasurementsTable, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, measurementsExternalSensorState=measurementsExternalSensorState, measurementsExternalSensorValue=measurementsExternalSensorValue, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, measurementsWire=measurementsWire, wireSensorMeasurementsTable=wireSensorMeasurementsTable, wireSensorMeasurementsEntry=wireSensorMeasurementsEntry, measurementsWireSensorIsAvailable=measurementsWireSensorIsAvailable, measurementsWireSensorState=measurementsWireSensorState, measurementsWireSensorValue=measurementsWireSensorValue)
mibBuilder.exportSymbols("PDU2-MIB", measurementsWireSensorTimeStamp=measurementsWireSensorTimeStamp, measurementsTransferSwitch=measurementsTransferSwitch, transferSwitchSensorMeasurementsTable=transferSwitchSensorMeasurementsTable, transferSwitchSensorMeasurementsEntry=transferSwitchSensorMeasurementsEntry, measurementsTransferSwitchSensorIsAvailable=measurementsTransferSwitchSensorIsAvailable, measurementsTransferSwitchSensorState=measurementsTransferSwitchSensorState, measurementsTransferSwitchSensorValue=measurementsTransferSwitchSensorValue, measurementsTransferSwitchSensorTimeStamp=measurementsTransferSwitchSensorTimeStamp, measurementsTransferSwitchSensorSignedValue=measurementsTransferSwitchSensorSignedValue, log=log, logUnit=logUnit, logIndexTable=logIndexTable, logIndexEntry=logIndexEntry, oldestLogID=oldestLogID, newestLogID=newestLogID, logTimeStampTable=logTimeStampTable, logTimeStampEntry=logTimeStampEntry, logIndex=logIndex, logTimeStamp=logTimeStamp, unitSensorLogTable=unitSensorLogTable, unitSensorLogEntry=unitSensorLogEntry, logUnitSensorDataAvailable=logUnitSensorDataAvailable, logUnitSensorState=logUnitSensorState, logUnitSensorAvgValue=logUnitSensorAvgValue, logUnitSensorMaxValue=logUnitSensorMaxValue, logUnitSensorMinValue=logUnitSensorMinValue, logUnitSensorSignedAvgValue=logUnitSensorSignedAvgValue, logUnitSensorSignedMaxValue=logUnitSensorSignedMaxValue, logUnitSensorSignedMinValue=logUnitSensorSignedMinValue, logInlet=logInlet, inletSensorLogTable=inletSensorLogTable, inletSensorLogEntry=inletSensorLogEntry, logInletSensorDataAvailable=logInletSensorDataAvailable, logInletSensorState=logInletSensorState, logInletSensorAvgValue=logInletSensorAvgValue, logInletSensorMaxValue=logInletSensorMaxValue, logInletSensorMinValue=logInletSensorMinValue, logInletSensorSignedAvgValue=logInletSensorSignedAvgValue, logInletSensorSignedMaxValue=logInletSensorSignedMaxValue, logInletSensorSignedMinValue=logInletSensorSignedMinValue, inletPoleSensorLogTable=inletPoleSensorLogTable, inletPoleSensorLogEntry=inletPoleSensorLogEntry, logInletPoleSensorDataAvailable=logInletPoleSensorDataAvailable, logInletPoleSensorState=logInletPoleSensorState, logInletPoleSensorAvgValue=logInletPoleSensorAvgValue, logInletPoleSensorMaxValue=logInletPoleSensorMaxValue, logInletPoleSensorMinValue=logInletPoleSensorMinValue, logInletPoleSensorSignedAvgValue=logInletPoleSensorSignedAvgValue, logInletPoleSensorSignedMaxValue=logInletPoleSensorSignedMaxValue, logInletPoleSensorSignedMinValue=logInletPoleSensorSignedMinValue, logOverCurrentProtector=logOverCurrentProtector, overCurrentProtectorSensorLogTable=overCurrentProtectorSensorLogTable, overCurrentProtectorSensorLogEntry=overCurrentProtectorSensorLogEntry, logOverCurrentProtectorSensorDataAvailable=logOverCurrentProtectorSensorDataAvailable, logOverCurrentProtectorSensorState=logOverCurrentProtectorSensorState, logOverCurrentProtectorSensorAvgValue=logOverCurrentProtectorSensorAvgValue, logOverCurrentProtectorSensorMaxValue=logOverCurrentProtectorSensorMaxValue, logOverCurrentProtectorSensorMinValue=logOverCurrentProtectorSensorMinValue, logOverCurrentProtectorSensorSignedAvgValue=logOverCurrentProtectorSensorSignedAvgValue, logOverCurrentProtectorSensorSignedMaxValue=logOverCurrentProtectorSensorSignedMaxValue, logOverCurrentProtectorSensorSignedMinValue=logOverCurrentProtectorSensorSignedMinValue, logOutlet=logOutlet, outletSensorLogTable=outletSensorLogTable, outletSensorLogEntry=outletSensorLogEntry, logOutletSensorDataAvailable=logOutletSensorDataAvailable, logOutletSensorState=logOutletSensorState, logOutletSensorAvgValue=logOutletSensorAvgValue, logOutletSensorMaxValue=logOutletSensorMaxValue, logOutletSensorMinValue=logOutletSensorMinValue, logOutletSensorSignedAvgValue=logOutletSensorSignedAvgValue, logOutletSensorSignedMaxValue=logOutletSensorSignedMaxValue, logOutletSensorSignedMinValue=logOutletSensorSignedMinValue, outletPoleSensorLogTable=outletPoleSensorLogTable, outletPoleSensorLogEntry=outletPoleSensorLogEntry, logOutletPoleSensorDataAvailable=logOutletPoleSensorDataAvailable, logOutletPoleSensorState=logOutletPoleSensorState, logOutletPoleSensorAvgValue=logOutletPoleSensorAvgValue, logOutletPoleSensorMaxValue=logOutletPoleSensorMaxValue, logOutletPoleSensorMinValue=logOutletPoleSensorMinValue, logOutletPoleSensorSignedAvgValue=logOutletPoleSensorSignedAvgValue, logOutletPoleSensorSignedMaxValue=logOutletPoleSensorSignedMaxValue, logOutletPoleSensorSignedMinValue=logOutletPoleSensorSignedMinValue, logExternalSensor=logExternalSensor, externalSensorLogTable=externalSensorLogTable, externalSensorLogEntry=externalSensorLogEntry, logExternalSensorDataAvailable=logExternalSensorDataAvailable, logExternalSensorState=logExternalSensorState, logExternalSensorAvgValue=logExternalSensorAvgValue, logExternalSensorMaxValue=logExternalSensorMaxValue, logExternalSensorMinValue=logExternalSensorMinValue, logWire=logWire, wireSensorLogTable=wireSensorLogTable, wireSensorLogEntry=wireSensorLogEntry, logWireSensorDataAvailable=logWireSensorDataAvailable, logWireSensorState=logWireSensorState, logWireSensorAvgValue=logWireSensorAvgValue, logWireSensorMaxValue=logWireSensorMaxValue, logWireSensorMinValue=logWireSensorMinValue, logTransferSwitch=logTransferSwitch, transferSwitchSensorLogTable=transferSwitchSensorLogTable, transferSwitchSensorLogEntry=transferSwitchSensorLogEntry, logTransferSwitchSensorDataAvailable=logTransferSwitchSensorDataAvailable, logTransferSwitchSensorState=logTransferSwitchSensorState, logTransferSwitchSensorAvgValue=logTransferSwitchSensorAvgValue, logTransferSwitchSensorMaxValue=logTransferSwitchSensorMaxValue, logTransferSwitchSensorMinValue=logTransferSwitchSensorMinValue, logTransferSwitchSensorSignedAvgValue=logTransferSwitchSensorSignedAvgValue, logTransferSwitchSensorSignedMaxValue=logTransferSwitchSensorSignedMaxValue, logTransferSwitchSensorSignedMinValue=logTransferSwitchSensorSignedMinValue, conformance=conformance, compliances=compliances, groups=groups, reliability=reliability, reliabilityData=reliabilityData, reliabilityDataTableSequenceNumber=reliabilityDataTableSequenceNumber, reliabilityDataTable=reliabilityDataTable, reliabilityDataEntry=reliabilityDataEntry, reliabilityIndex=reliabilityIndex, reliabilityId=reliabilityId, reliabilityDataValue=reliabilityDataValue, reliabilityDataMaxPossible=reliabilityDataMaxPossible, reliabilityDataWorstValue=reliabilityDataWorstValue, reliabilityDataThreshold=reliabilityDataThreshold, reliabilityDataRawUpperBytes=reliabilityDataRawUpperBytes, reliabilityDataRawLowerBytes=reliabilityDataRawLowerBytes, reliabilityDataFlags=reliabilityDataFlags, reliabilityErrorLog=reliabilityErrorLog)
mibBuilder.exportSymbols("PDU2-MIB", reliabilityErrorLogTable=reliabilityErrorLogTable, reliabilityErrorLogEntry=reliabilityErrorLogEntry, reliabilityErrorLogIndex=reliabilityErrorLogIndex, reliabilityErrorLogId=reliabilityErrorLogId, reliabilityErrorLogValue=reliabilityErrorLogValue, reliabilityErrorLogThreshold=reliabilityErrorLogThreshold, reliabilityErrorLogRawUpperBytes=reliabilityErrorLogRawUpperBytes, reliabilityErrorLogRawLowerBytes=reliabilityErrorLogRawLowerBytes, reliabilityErrorLogPOH=reliabilityErrorLogPOH, reliabilityErrorLogTime=reliabilityErrorLogTime)

# Notifications
mibBuilder.exportSymbols("PDU2-MIB", systemStarted=systemStarted, systemReset=systemReset, userLogin=userLogin, userLogout=userLogout, userAuthenticationFailure=userAuthenticationFailure, userSessionTimeout=userSessionTimeout, userAdded=userAdded, userModified=userModified, userDeleted=userDeleted, roleAdded=roleAdded, roleModified=roleModified, roleDeleted=roleDeleted, deviceUpdateStarted=deviceUpdateStarted, deviceUpdateCompleted=deviceUpdateCompleted, userBlocked=userBlocked, powerControl=powerControl, userPasswordChanged=userPasswordChanged, passwordSettingsChanged=passwordSettingsChanged, firmwareValidationFailed=firmwareValidationFailed, logFileCleared=logFileCleared, bulkConfigurationSaved=bulkConfigurationSaved, bulkConfigurationCopied=bulkConfigurationCopied, pduSensorStateChange=pduSensorStateChange, inletSensorStateChange=inletSensorStateChange, inletPoleSensorStateChange=inletPoleSensorStateChange, outletSensorStateChange=outletSensorStateChange, outletPoleSensorStateChange=outletPoleSensorStateChange, overCurrentProtectorSensorStateChange=overCurrentProtectorSensorStateChange, externalSensorStateChange=externalSensorStateChange, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, ldapError=ldapError, deviceUpdateFailed=deviceUpdateFailed, loadSheddingModeEntered=loadSheddingModeEntered, loadSheddingModeExited=loadSheddingModeExited, pingServerEnabled=pingServerEnabled, pingServerDisabled=pingServerDisabled, serverNotReachable=serverNotReachable, serverReachable=serverReachable, rfCodeTagConnected=rfCodeTagConnected, rfCodeTagDisconnected=rfCodeTagDisconnected, deviceIdentificationChanged=deviceIdentificationChanged, usbSlaveConnected=usbSlaveConnected, usbSlaveDisconnected=usbSlaveDisconnected, lhxSupportChanged=lhxSupportChanged, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, wireSensorStateChange=wireSensorStateChange, transferSwitchSensorStateChange=transferSwitchSensorStateChange, deviceSettingsSaved=deviceSettingsSaved, deviceSettingsRestored=deviceSettingsRestored, webcamInserted=webcamInserted, webcamRemoved=webcamRemoved, inletEnabled=inletEnabled, inletDisabled=inletDisabled, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, radiusError=radiusError, serverReachabilityError=serverReachabilityError, inletSensorReset=inletSensorReset, outletSensorReset=outletSensorReset, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, unitSensorReset=unitSensorReset, unitSensorStateChange=unitSensorStateChange)

# Groups
mibBuilder.exportSymbols("PDU2-MIB", configGroup=configGroup, logGroup=logGroup, measurementsGroup=measurementsGroup, controlGroup=controlGroup, trapInformationGroup=trapInformationGroup, trapsGroup=trapsGroup, reliabilityGroup=reliabilityGroup, ipAddressGroup=ipAddressGroup, oldConfigGroup=oldConfigGroup, oldLogGroup=oldLogGroup, oldMeasurementsGroup=oldMeasurementsGroup, oldTrapsGroup=oldTrapsGroup)

# Compliances
mibBuilder.exportSymbols("PDU2-MIB", complianceRev1=complianceRev1, complianceRev2=complianceRev2)
